var AppNormalize = (function() {
    var module = {};
    var _thisModuleName = "AppNormalize";
    var _assessmentIdentifier = "caaspp_interim_and_summative";
    var _thisLineageSource = "Edvantage ${_assessmentIdentifier} Loader v1.0";
    var multipleRowsPerGroupingExpected = false;
    var perLevelDecode = new HashTable();
    var testNameDecode = new HashTable();
/* This connector is meant to be licensed separately from caaspp_interim and caaspp_1516.
Using it with either other connector WILL cause duplicates!
This connector allows Summative data through the Interim sig format*/


   /**
   * Converts an assessment source file into the normalized assessment format.
   *
   * @param file The raw source file being reviewed.
   * @param signature The signature file details in JSON format.
   * @returns {String} The location of the normalized file.
   */
   module.createNormalizedFile = function (file, signature) {
      try {
          var signatureFormatName = signature.getFormat().getFormatName();
          print("Loading using signature file ${signatureFormatName} \n");

         var normalizedFile = AppUtil.createResultsFile(file);
         print("Normalized file: ${normalizedFile} \n");

         var hierarchy = AppUtil.getAssessmentHierarchyDetails(file);
         var lineNumber = 0;
         const fileFullName = file.getFullName();

         _dataflow.create("RECORD BUILD")
            .input("INPUT", AppUtil.getInputDataflow(file, signature))
            .transform("ADD LINEAGE FIELD", ["RECORDS"], function (output, json) {

               json.LINEAGE_FILE = fileFullName;
               json.LINEAGE_LINE = (++lineNumber).toString();
               output.RECORDS.put(json);
            })
            .group_by("ADMINISTRATION GROUPING", function (one, two) {
               try {
                  var rowOne = AppSignatureFieldDetails.getFieldDetailsParser(signature, one);
                  var rowTwo = AppSignatureFieldDetails.getFieldDetailsParser(signature, two);

                  return groupAssessmentByNaturalKey(signature, hierarchy, rowOne, rowTwo);
               } catch (exception) {
                  AssessmentLoader.audits.push(AppAudit.writeRejectRecord(hierarchy.SOURCE_FILE.getFilePath(), "HIGH", one.LINEAGE_LINE, "ADMINISTRATION GROUPING dataflow error: ${exception}", JSON.stringify(one) + "|" + JSON.stringify(two)));
               }
            })
            .transform("DUPLICATE ADMINISTRATION CHECK", ["RECORDS"], function (output, rows) {
               try {
                  if (!multipleRowsPerGroupingExpected && rows.length > 1) {
                     rows.forEach(function (row) {
                        AssessmentLoader.audits.push(AppAudit.writeRejectRecord(file.getFilePath(), "WARNING", json.LINEAGE_LINE, "Duplicate record natural key in source assessment file.", JSON.stringify(row.getSourceRow)));
                     });

                  } else {
                     output.RECORDS.put(rows);
                  }
               } catch (exception) {
                  AssessmentLoader.audits.push(AppAudit.writeRejectRecord(hierarchy.SOURCE_FILE.getFilePath(), "WARNING", rows[0].LINEAGE_LINE, "DUPLICATE ADMINISTRATION CHECK dataflow error: ${exception}", JSON.stringify(rows)));
               }
            })
            .transform("NORMALIZE RECORDS", ["RECORDS"], function (output, rows) {
               try {
                  var normalizedRecords = mapNormalizedRecords(signature, hierarchy, rows);

                  normalizedRecords.forEach(function (record) {
                     output.RECORDS.put(record);
                  });

               } catch (exception) {
                  AssessmentLoader.audits.push(AppAudit.writeRejectRecord(hierarchy.SOURCE_FILE.getFilePath(), "HIGH", rows[0].LINEAGE_LINE, "TRANSFORMATION dataflow error: ${exception}", JSON.stringify(rows)));
               }
            })
            .transform("SCORE COUNT CHECK", ["RECORDS"], function (output, row) {
               try {
                  var mappingObject = JSON.parse(row.ASSESSMENT_JSON_MAPPINGS);
                  if (mappingObject.ERROR_MESSAGE) {
                     AssessmentLoader.audits.push(AppAudit.writeRejectRecord(
                        file.getFilePath(),
                        "WARNING",
                        row.LINEAGE_LINE,
                        mappingObject.ERROR_MESSAGE,
                        JSON.stringify(row)
                     ));
                  } else if (mappingObject.SCORE_MAPPINGS.length === 0) {
                     AssessmentLoader.audits.push(AppAudit.writeRejectRecord(
                        file.getFilePath(),
                        "WARNING",
                        row.LINEAGE_LINE,
                        "No scores found.",
                        JSON.stringify(row)
                     ));
                  } else {
                     output.RECORDS.put(row);
                  }
               } catch (exception) {
                  AssessmentLoader.audits.push(AppAudit.writeRejectRecord(hierarchy.SOURCE_FILE.getFilePath(), "HIGH", _util.coalesce(row.LINEAGE_LINE, -1), "SCORE COUNT CHECK dataflow error: ${exception}", JSON.stringify(row)));
               }
            })
            .output("OUTPUT", _io.delim_output(normalizedFile, "\t", "\"", "\\", false))
            .execute_markII(AssessmentLoader.config.ENABLE_DEBUG, 200, 1, 100);

         return normalizedFile;
      } catch (exception) {
         throw "${_thisModuleName}.createNormalizedFile Exception: ${exception}";
      }
   };


   /**
   * Merges a normalized file into the master normalized file.
   *
   * @param file The normalized assessment file to be merged.
   * @returns {file} The merged normalized file.
   */
   module.mergeAssessment = function (file) {
      return AppDataflow.mergeAssessment(file);
   };

   /***************************************************************************
   Assessment-specific Objects
   ***************************************************************************/
   var scoresToMap =
      [
         //Start 12:20 to 12:40 for previous year file
         //12:51 to 12:53 (merge) to  at customer for current single file
         // IAB
         //Literary Texts IAB/FIAB
         { TEST: "IAB", CODE: "CAIS_IAB_ELA_READ_03_LIT", NAME: "GRADE 3 ELA - READ LITERARY TEXTS (IAB)" }
         , { TEST: "IAB", CODE: "CAIS_IAB_ELA_READ_04_LIT", NAME: "GRADE 4 ELA - READ LITERARY TEXTS (IAB)" }
         , { TEST: "IAB", CODE: "CAIS_IAB_ELA_READ_05_LIT", NAME: "GRADE 5 ELA - READ LITERARY TEXTS (IAB)" }
         , { TEST: "IAB", CODE: "CAIS_IAB_ELA_READ_06_LIT", NAME: "GRADE 6 ELA - READ LITERARY TEXTS (IAB)" }
         , { TEST: "IAB", CODE: "CAIS_IAB_ELA_READ_07_LIT", NAME: "GRADE 7 ELA - READ LITERARY TEXTS (IAB)" }
         , { TEST: "IAB", CODE: "CAIS_IAB_ELA_READ_08_LIT", NAME: "GRADE 8 ELA - READ LITERARY TEXTS (IAB)" }
         , { TEST: "IAB", CODE: "CAIS_IAB_ELA_READ_HS_LIT", NAME: "HIGH SCHOOL ELA - READ LITERARY TEXTS (IAB)" }

         //INFORMATIONAL TEXTS
//         , { TEST: "IAB", CODE: "CAIS_IAB_ELA_READ_03_INF", NAME: "GRADE 3 ELA - READ INFORMATIONAL TEXTS (IAB)" }
//         , { TEST: "IAB", CODE: "CAIS_IAB_ELA_READ_03_INF", NAME: "GRADE 03 ELA - READ INFORMATIONAL TEXTS (IAB)" }
//         , { TEST: "IAB", CODE: "CAIS_IAB_ELA_READ_04_INF", NAME: "GRADE 4 ELA - READ INFORMATIONAL TEXTS (IAB)" }
//         , { TEST: "IAB", CODE: "CAIS_IAB_ELA_READ_04_INF", NAME: "GRADE 04 ELA - READ INFORMATIONAL TEXTS (IAB)" }
//         , { TEST: "IAB", CODE: "CAIS_IAB_ELA_READ_05_INF", NAME: "GRADE 5 ELA - READ INFORMATIONAL TEXTS (IAB)" }
//         , { TEST: "IAB", CODE: "CAIS_IAB_ELA_READ_05_INF", NAME: "GRADE 05 ELA - READ INFORMATIONAL TEXTS (IAB)" }
//         , { TEST: "IAB", CODE: "CAIS_IAB_ELA_READ_06_INF", NAME: "GRADE 6 ELA - READ INFORMATIONAL TEXTS (IAB)" }
//         , { TEST: "IAB", CODE: "CAIS_IAB_ELA_READ_06_INF", NAME: "GRADE 06 ELA - READ INFORMATIONAL TEXTS (IAB)" }
//         , { TEST: "IAB", CODE: "CAIS_IAB_ELA_READ_07_INF", NAME: "GRADE 7 ELA - READ INFORMATIONAL TEXTS (IAB)" }
//         , { TEST: "IAB", CODE: "CAIS_IAB_ELA_READ_07_INF", NAME: "GRADE 07 ELA - READ INFORMATIONAL TEXTS (IAB)" }
//         , { TEST: "IAB", CODE: "CAIS_IAB_ELA_READ_08_INF", NAME: "GRADE 8 ELA - READ INFORMATIONAL TEXTS (IAB)" }
//         , { TEST: "IAB", CODE: "CAIS_IAB_ELA_READ_08_INF", NAME: "GRADE 08 ELA - READ INFORMATIONAL TEXTS (IAB)" }
         , { TEST: "IAB", CODE: "CAIS_IAB_ELA_READ_HS_INF", NAME: "HIGH SCHOOL ELA - READ INFORMATIONAL TEXTS (IAB)" }
         , { TEST: "IAB", CODE: "CAIS_IAB_ELA_READ_03_INF", NAME: "GRADE 3 ELA - READ INFORMATIONAL TEXTS (IAB)" }
         , { TEST: "IAB", CODE: "CAIS_IAB_ELA_READ_04_INF", NAME: "GRADE 4 ELA - READ INFORMATIONAL TEXTS (IAB)" }
         , { TEST: "IAB", CODE: "CAIS_IAB_ELA_READ_05_INF", NAME: "GRADE 5 ELA - READ INFORMATIONAL TEXTS (IAB)" }
         , { TEST: "IAB", CODE: "CAIS_IAB_ELA_READ_05_INF", NAME: "GRADE 5 ELA - READ INFORMATIONAL TEXTS  (IAB)" }
         , { TEST: "IAB", CODE: "CAIS_IAB_ELA_READ_06_INF", NAME: "GRADE 6 ELA - READ INFORMATIONAL TEXTS (IAB)" }
         , { TEST: "IAB", CODE: "CAIS_IAB_ELA_READ_07_INF", NAME: "GRADE 7 ELA - READ INFORMATIONAL TEXTS (IAB)" }
         , { TEST: "IAB", CODE: "CAIS_IAB_ELA_READ_08_INF", NAME: "GRADE 8 ELA - READ INFORMATIONAL TEXTS (IAB)" }

         //ELA PERFORMANCE TASKS
         , { TEST: "IAB", CODE: "CAIS_IAB_ELA_PERF_03_BEET", NAME: "GRADE 03 ELA PERFORMANCE TASK - BEETLES (IAB)" }
         , { TEST: "IAB", CODE: "CAIS_IAB_ELA_PERF_03_BEET", NAME: "GRADE 03 ELA - PERFORMANCE TASK - BEETLES (IAB)" }
         , { TEST: "IAB", CODE: "CAIS_IAB_ELA_PERF_03_BEET", NAME: "GRADE 3 ELA - PERFORMANCE TASK - BEETLES (IAB)" }
         , { TEST: "IAB", CODE: "CAIS_IAB_ELA_PERF_04_UAF", NAME: "GRADE 04 ELA PERFORMANCE TASK - UNLIKELY ANIMAL FRIENDS (IAB)" }
         , { TEST: "IAB", CODE: "CAIS_IAB_ELA_PERF_04_UAF", NAME: "GRADE 4 ELA - PERFORMANCE TASK - UNLIKELY ANIMAL FRIENDS (IAB)" }
         , { TEST: "IAB", CODE: "CAIS_IAB_ELA_PERF_05_WHA", NAME: "GRADE 05 ELA PERFORMANCE TASK - WHALES (IAB)" }
         , { TEST: "IAB", CODE: "CAIS_IAB_ELA_PERF_05_WHA", NAME: "GRADE 5 ELA - PERFORMANCE TASK - WHALES (IAB)" }
         , { TEST: "IAB", CODE: "CAIS_IAB_ELA_PERF_06_MV", NAME: "GRADE 06 ELA PERFORMANCE TASK - MULTIVITAMINS (IAB)" }
         , { TEST: "IAB", CODE: "CAIS_IAB_ELA_PERF_06_MV", NAME: "GRADE 6 ELA - PERFORMANCE TASK - MULTIVITAMINS (IAB)" }
         , { TEST: "IAB", CODE: "CAIS_IAB_ELA_PERF_07_MOBED", NAME: "GRADE 07 ELA PERFORMANCE TASK - MOBILE ED TECHNOLOGY (IAB)" }
         , { TEST: "IAB", CODE: "CAIS_IAB_ELA_PERF_07_MOBED", NAME: "GRADE 7 ELA - PERFORMANCE TASK - MOBILE ED TECHNOLOGY (IAB)" }
         , { TEST: "IAB", CODE: "CAIS_IAB_ELA_PERF_08_ANCSOC", NAME: "GRADE 08 ELA PERFORMANCE TASK - COMPARE ANCIENT SOCIETIES (IAB)" }
         , { TEST: "IAB", CODE: "CAIS_IAB_ELA_PERF_08_ANCSOC", NAME: "GRADE 8 ELA - PERFORMANCE TASK - COMPARE ANCIENT SOCIETIES (IAB)" }
         , { TEST: "IAB", CODE: "CAIS_IAB_ELA_PERF_08_ANCSOC", NAME: "GRADE 8 ELA - PERFORMANCE TASK - COMPARE ANCIENT SOCIETIES (FIAB)" }
         , { TEST: "IAB", CODE: "CAIS_IAB_ELA_PERF_HS_HWL", NAME: "HIGH SCHOOL ELA PERFORMANCE TASK - HOW WE LEARN (IAB)" }
         , { TEST: "IAB", CODE: "CAIS_IAB_ELA_PERF_HS_HWL", NAME: "HIGH SCHOOL ELA - PERFORMANCE TASK - HOW WE LEARN (IAB)" }
         , { TEST: "IAB", CODE: "CAIS_IAB_ELA_PERF_HS_HWL", NAME: "HIGH SCHOOL ELA - PERFORMANCE TASK - HOW WE LEARN (FIAB)" }
         , { TEST: "IAB", CODE: "CAIS_IAB_ELA_PERF_03_BEET", NAME: "GRADE 3 ELA PERFORMANCE TASK - BEETLES (IAB)" }
         , { TEST: "IAB", CODE: "CAIS_IAB_ELA_PERF_03_BEET", NAME: "GRADE 3 ELA PERFORMANCE TASK - BEETLES (FIAB)" }
         , { TEST: "IAB", CODE: "CAIS_IAB_ELA_PERF_04_UAF", NAME: "GRADE 4 ELA PERFORMANCE TASK - UNLIKELY ANIMAL FRIENDS (IAB)" }
         , { TEST: "IAB", CODE: "CAIS_IAB_ELA_PERF_04_UAF", NAME: "GRADE 4 ELA - PERFORMANCE TASK - UNLIKELY ANIMAL FRIENDS (IAB)" }
         , { TEST: "IAB", CODE: "CAIS_IAB_ELA_PERF_04_UAF", NAME: "GRADE 4 ELA - PERFORMANCE TASK - UNLIKELY ANIMAL FRIENDS (FIAB)" }
         , { TEST: "IAB", CODE: "CAIS_IAB_ELA_PERF_05_WHA", NAME: "GRADE 5 ELA PERFORMANCE TASK - WHALES (IAB)" }
         , { TEST: "IAB", CODE: "CAIS_IAB_ELA_PERF_05_WHA", NAME: "GRADE 5 ELA - PERFORMANCE TASK - WHALES (IAB)" }
         , { TEST: "IAB", CODE: "CAIS_IAB_ELA_PERF_05_WHA", NAME: "GRADE 5 ELA - PERFORMANCE TASK - WHALES (FIAB)" }
         , { TEST: "IAB", CODE: "CAIS_IAB_ELA_PERF_06_MV", NAME: "GRADE 6 ELA PERFORMANCE TASK - MULTIVITAMINS (IAB)" }
         , { TEST: "IAB", CODE: "CAIS_IAB_ELA_PERF_06_MV", NAME: "GRADE 6 ELA - PERFORMANCE TASK - MULTIVITAMINS (IAB)" }
         , { TEST: "IAB", CODE: "CAIS_IAB_ELA_PERF_07_MOBED", NAME: "GRADE 7 ELA PERFORMANCE TASK - MOBILE ED TECHNOLOGY (IAB)" }
         , { TEST: "IAB", CODE: "CAIS_IAB_ELA_PERF_07_MOBED", NAME: "GRADE 7 ELA - PERFORMANCE TASK - MOBILE ED TECHNOLOGY (IAB)" }
         , { TEST: "IAB", CODE: "CAIS_IAB_ELA_PERF_08_ANCSOC", NAME: "GRADE 8 ELA PERFORMANCE TASK - COMPARE ANCIENT SOCIETIES (IAB)" }
         , { TEST: "IAB", CODE: "CAIS_IAB_ELA_PERF_08_ANCSOC", NAME: "GRADE 8 ELA - PERFORMANCE TASK - COMPARE ANCIENT SOCIETIES (IAB)" }
         , { TEST: "IAB", CODE: "CAIS_IAB_ELA_PERF_08_MAPTECH", NAME: "GRADE 8 ELA - PERFORMANCE TASK - MAPS AND TECHNOLOGY (IAB)" }

         //LANGUAGE AND VOCABULARY USE
//         , { TEST: "IAB", CODE: "CAIS_IAB_ELA_03_LANG", NAME: "GRADE 03 ELA - LANGUAGE AND VOCABULARY USE (IAB)" }
//         , { TEST: "IAB", CODE: "CAIS_IAB_ELA_04_LANG", NAME: "GRADE 04 ELA - LANGUAGE AND VOCABULARY USE (IAB)" }
//         , { TEST: "IAB", CODE: "CAIS_IAB_ELA_05_LANG", NAME: "GRADE 05 ELA - LANGUAGE AND VOCABULARY USE (IAB)" }
//         , { TEST: "IAB", CODE: "CAIS_IAB_ELA_06_LANG", NAME: "GRADE 06 ELA - LANGUAGE AND VOCABULARY USE (IAB)" }
//         , { TEST: "IAB", CODE: "CAIS_IAB_ELA_07_LANG", NAME: "GRADE 07 ELA - LANGUAGE AND VOCABULARY USE (IAB)" }
//         , { TEST: "IAB", CODE: "CAIS_IAB_ELA_08_LANG", NAME: "GRADE 08 ELA - LANGUAGE AND VOCABULARY USE (IAB)" }
         , { TEST: "IAB", CODE: "CAIS_IAB_ELA_HS_LANG", NAME: "HIGH SCHOOL ELA - LANGUAGE AND VOCABULARY USE (IAB)" }
         , { TEST: "IAB", CODE: "CAIS_IAB_ELA_03_LANG", NAME: "GRADE 3 ELA - LANGUAGE AND VOCABULARY USE (IAB)" }
         , { TEST: "IAB", CODE: "CAIS_IAB_ELA_04_LANG", NAME: "GRADE 4 ELA - LANGUAGE AND VOCABULARY USE (IAB)" }
         , { TEST: "IAB", CODE: "CAIS_IAB_ELA_05_LANG", NAME: "GRADE 5 ELA - LANGUAGE AND VOCABULARY USE (IAB)" }
         , { TEST: "IAB", CODE: "CAIS_IAB_ELA_06_LANG", NAME: "GRADE 6 ELA - LANGUAGE AND VOCABULARY USE (IAB)" }
         , { TEST: "IAB", CODE: "CAIS_IAB_ELA_07_LANG", NAME: "GRADE 7 ELA - LANGUAGE AND VOCABULARY USE (IAB)" }
         , { TEST: "IAB", CODE: "CAIS_IAB_ELA_08_LANG", NAME: "GRADE 8 ELA - LANGUAGE AND VOCABULARY USE (IAB)" }

         //BRIEF WRITES
//         , { TEST: "IAB", CODE: "CAIS_IAB_ELA_03_BW", NAME: "GRADE 03 ELA - BRIEF WRITES (IAB)" }
//         , { TEST: "IAB", CODE: "CAIS_IAB_ELA_04_BW", NAME: "GRADE 04 ELA - BRIEF WRITES (IAB)" }
//         , { TEST: "IAB", CODE: "CAIS_IAB_ELA_05_BW", NAME: "GRADE 05 ELA - BRIEF WRITES (IAB)" }
//         , { TEST: "IAB", CODE: "CAIS_IAB_ELA_06_BW", NAME: "GRADE 06 ELA - BRIEF WRITES (IAB)" }
//         , { TEST: "IAB", CODE: "CAIS_IAB_ELA_07_BW", NAME: "GRADE 07 ELA - BRIEF WRITES (IAB)" }
//         , { TEST: "IAB", CODE: "CAIS_IAB_ELA_08_BW", NAME: "GRADE 08 ELA - BRIEF WRITES (IAB)" }
         , { TEST: "IAB", CODE: "CAIS_IAB_ELA_HS_BW", NAME: "HIGH SCHOOL ELA - BRIEF WRITES (IAB)" }
         , { TEST: "IAB", CODE: "CAIS_IAB_ELA_03_BW", NAME: "GRADE 3 ELA - BRIEF WRITES (IAB)" }
         , { TEST: "IAB", CODE: "CAIS_IAB_ELA_04_BW", NAME: "GRADE 4 ELA - BRIEF WRITES (IAB)" }
         , { TEST: "IAB", CODE: "CAIS_IAB_ELA_05_BW", NAME: "GRADE 5 ELA - BRIEF WRITES (IAB)" }
         , { TEST: "IAB", CODE: "CAIS_IAB_ELA_06_BW", NAME: "GRADE 6 ELA - BRIEF WRITES (IAB)" }
         , { TEST: "IAB", CODE: "CAIS_IAB_ELA_07_BW", NAME: "GRADE 7 ELA - BRIEF WRITES (IAB)" }
         , { TEST: "IAB", CODE: "CAIS_IAB_ELA_08_BW", NAME: "GRADE 8 ELA - BRIEF WRITES (IAB)" }
         //EDITING
//         , { TEST: "IAB", CODE: "CAIS_IAB_ELA_03_EDIT", NAME: "GRADE 03 ELA - EDITING (IAB)" }
//         , { TEST: "IAB", CODE: "CAIS_IAB_ELA_04_EDIT", NAME: "GRADE 04 ELA - EDITING (IAB)" }
//         , { TEST: "IAB", CODE: "CAIS_IAB_ELA_05_EDIT", NAME: "GRADE 05 ELA - EDITING (IAB)" }
//         , { TEST: "IAB", CODE: "CAIS_IAB_ELA_06_EDIT", NAME: "GRADE 06 ELA - EDITING (IAB)" }
//         , { TEST: "IAB", CODE: "CAIS_IAB_ELA_07_EDIT", NAME: "GRADE 07 ELA - EDITING (IAB)" }
//         , { TEST: "IAB", CODE: "CAIS_IAB_ELA_08_EDIT", NAME: "GRADE 08 ELA - EDITING (IAB)" }
         , { TEST: "IAB", CODE: "CAIS_IAB_ELA_HS_EDIT", NAME: "HIGH SCHOOL ELA - EDITING (IAB)" }
         , { TEST: "IAB", CODE: "CAIS_IAB_ELA_03_EDIT", NAME: "GRADE 3 ELA - EDITING (IAB)" }
         , { TEST: "IAB", CODE: "CAIS_IAB_ELA_04_EDIT", NAME: "GRADE 4 ELA - EDITING (IAB)" }
         , { TEST: "IAB", CODE: "CAIS_IAB_ELA_05_EDIT", NAME: "GRADE 5 ELA - EDITING (IAB)" }
         , { TEST: "IAB", CODE: "CAIS_IAB_ELA_06_EDIT", NAME: "GRADE 6 ELA - EDITING (IAB)" }
         , { TEST: "IAB", CODE: "CAIS_IAB_ELA_07_EDIT", NAME: "GRADE 7 ELA - EDITING (IAB)" }
         , { TEST: "IAB", CODE: "CAIS_IAB_ELA_08_EDIT", NAME: "GRADE 8 ELA - EDITING (IAB)" }
         //REVISION
//         , { TEST: "IAB", CODE: "CAIS_IAB_ELA_03_REV", NAME: "GRADE 03 ELA - REVISION (IAB)" }
//         , { TEST: "IAB", CODE: "CAIS_IAB_ELA_04_REV", NAME: "GRADE 04 ELA - REVISION (IAB)" }
//         , { TEST: "IAB", CODE: "CAIS_IAB_ELA_05_REV", NAME: "GRADE 05 ELA - REVISION (IAB)" }
//         , { TEST: "IAB", CODE: "CAIS_IAB_ELA_06_REV", NAME: "GRADE 06 ELA - REVISION (IAB)" }
//         , { TEST: "IAB", CODE: "CAIS_IAB_ELA_07_REV", NAME: "GRADE 07 ELA - REVISION (IAB)" }
         , { TEST: "IAB", CODE: "CAIS_IAB_ELA_HS_REV", NAME: "HIGH SCHOOL ELA - REVISION (IAB)" }
         , { TEST: "IAB", CODE: "CAIS_IAB_ELA_03_REV", NAME: "GRADE 3 ELA - REVISION (IAB)" }
         , { TEST: "IAB", CODE: "CAIS_IAB_ELA_04_REV", NAME: "GRADE 4 ELA - REVISION (IAB)" }
         , { TEST: "IAB", CODE: "CAIS_IAB_ELA_05_REV", NAME: "GRADE 5 ELA - REVISION (IAB)" }
         , { TEST: "IAB", CODE: "CAIS_IAB_ELA_06_REV", NAME: "GRADE 6 ELA - REVISION (IAB)" }
         , { TEST: "IAB", CODE: "CAIS_IAB_ELA_07_REV", NAME: "GRADE 7 ELA - REVISION (IAB)" }
         //EDIT/REVISE
//         , { TEST: "IAB", CODE: "CAIS_IAB_ELA_08_EDITREV", NAME: "GRADE 08 ELA - EDIT/REVISE (IAB)" }
//         , { TEST: "IAB", CODE: "CAIS_IAB_ELA_07_EDITREV", NAME: "GRADE 07 ELA - EDIT/REVISE (IAB)" }
//         , { TEST: "IAB", CODE: "CAIS_IAB_ELA_06_EDITREV", NAME: "GRADE 06 ELA - EDIT/REVISE (IAB)" }
//         , { TEST: "IAB", CODE: "CAIS_IAB_ELA_05_EDITREV", NAME: "GRADE 05 ELA - EDIT/REVISE (IAB)" }
//         , { TEST: "IAB", CODE: "CAIS_IAB_ELA_04_EDITREV", NAME: "GRADE 04 ELA - EDIT/REVISE (IAB)" }
//         , { TEST: "IAB", CODE: "CAIS_IAB_ELA_03_EDITREV", NAME: "GRADE 03 ELA - EDIT/REVISE (IAB)" }
         , { TEST: "IAB", CODE: "CAIS_IAB_ELA_08_EDITREV", NAME: "GRADE 8 ELA - EDIT/REVISE (IAB)" }
         , { TEST: "IAB", CODE: "CAIS_IAB_ELA_07_EDITREV", NAME: "GRADE 7 ELA - EDIT/REVISE (IAB)" }
         , { TEST: "IAB", CODE: "CAIS_IAB_ELA_06_EDITREV", NAME: "GRADE 6 ELA - EDIT/REVISE (IAB)" }
         , { TEST: "IAB", CODE: "CAIS_IAB_ELA_05_EDITREV", NAME: "GRADE 5 ELA - EDIT/REVISE (IAB)" }
         , { TEST: "IAB", CODE: "CAIS_IAB_ELA_04_EDITREV", NAME: "GRADE 4 ELA - EDIT/REVISE (IAB)" }
         , { TEST: "IAB", CODE: "CAIS_IAB_ELA_03_EDITREV", NAME: "GRADE 3 ELA - EDIT/REVISE (IAB)" }
         , { TEST: "IAB", CODE: "CAIS_IAB_ELA_HS_EDITREV", NAME: "HIGH SCHOOL ELA - EDIT/REVISE (IAB)" }
         //LISTEN/INTERPRET
//         , { TEST: "IAB", CODE: "CAIS_IAB_ELA_03_LISINT", NAME: "GRADE 03 ELA - LISTEN/INTERPRET (IAB)" }
//         , { TEST: "IAB", CODE: "CAIS_IAB_ELA_04_LISINT", NAME: "GRADE 04 ELA - LISTEN/INTERPRET (IAB)" }
//         , { TEST: "IAB", CODE: "CAIS_IAB_ELA_05_LISINT", NAME: "GRADE 05 ELA - LISTEN/INTERPRET (IAB)" }
//         , { TEST: "IAB", CODE: "CAIS_IAB_ELA_06_LISINT", NAME: "GRADE 06 ELA - LISTEN/INTERPRET (IAB)" }
//         , { TEST: "IAB", CODE: "CAIS_IAB_ELA_07_LISINT", NAME: "GRADE 07 ELA - LISTEN/INTERPRET (IAB)" }
//         , { TEST: "IAB", CODE: "CAIS_IAB_ELA_08_LISINT", NAME: "GRADE 08 ELA - LISTEN/INTERPRET (IAB)" }
         , { TEST: "IAB", CODE: "CAIS_IAB_ELA_HS_LISINT", NAME: "HIGH SCHOOL ELA - LISTEN/INTERPRET (IAB)" }
         , { TEST: "IAB", CODE: "CAIS_IAB_ELA_03_LISINT", NAME: "GRADE 3 ELA - LISTEN/INTERPRET (IAB)" }
         , { TEST: "IAB", CODE: "CAIS_IAB_ELA_04_LISINT", NAME: "GRADE 4 ELA - LISTEN/INTERPRET (IAB)" }
         , { TEST: "IAB", CODE: "CAIS_IAB_ELA_05_LISINT", NAME: "GRADE 5 ELA - LISTEN/INTERPRET (IAB)" }
         , { TEST: "IAB", CODE: "CAIS_IAB_ELA_06_LISINT", NAME: "GRADE 6 ELA - LISTEN/INTERPRET (IAB)" }
         , { TEST: "IAB", CODE: "CAIS_IAB_ELA_07_LISINT", NAME: "GRADE 7 ELA - LISTEN/INTERPRET (IAB)" }
         , { TEST: "IAB", CODE: "CAIS_IAB_ELA_08_LISINT", NAME: "GRADE 8 ELA - LISTEN/INTERPRET (IAB)" }

         // WRITE AND REVISE
         , { TEST: "IAB", CODE: "CAIS_IAB_ELA_03_WTREVNAR", NAME: "GRADE 3 ELA - WRITE AND REVISE NARRATIVES (IAB)" }
         , { TEST: "IAB", CODE: "CAIS_IAB_ELA_04_WTREVNAR", NAME: "GRADE 4 ELA - WRITE AND REVISE NARRATIVES (IAB)" }
         , { TEST: "IAB", CODE: "CAIS_IAB_ELA_05_WTREVNAR", NAME: "GRADE 5 ELA - WRITE AND REVISE NARRATIVES (IAB)" }
         , { TEST: "IAB", CODE: "CAIS_IAB_ELA_06_WTREVNAR", NAME: "GRADE 6 ELA - WRITE AND REVISE NARRATIVES (IAB)" }
         , { TEST: "IAB", CODE: "CAIS_IAB_ELA_07_WTREVNAR", NAME: "GRADE 7 ELA - WRITE AND REVISE NARRATIVES (IAB)" }
         , { TEST: "IAB", CODE: "CAIS_IAB_ELA_08_WTREVNAR", NAME: "GRADE 8 ELA - WRITE AND REVISE NARRATIVES (IAB)" }
         , { TEST: "IAB", CODE: "CAIS_IAB_ELA_HS_WTREVNAR", NAME: "HIGH SCHOOL ELA - WRITE AND REVISE NARRATIVES (IAB)" }
         //RESEARCH
//         , { TEST: "IAB", CODE: "CAIS_IAB_ELA_03_RSRCH", NAME: "GRADE 03 ELA - RESEARCH (IAB)" }
//         , { TEST: "IAB", CODE: "CAIS_IAB_ELA_04_RSRCH", NAME: "GRADE 04 ELA - RESEARCH (IAB)" }
//         , { TEST: "IAB", CODE: "CAIS_IAB_ELA_05_RSRCH", NAME: "GRADE 05 ELA - RESEARCH (IAB)" }
//         , { TEST: "IAB", CODE: "CAIS_IAB_ELA_06_RSRCH", NAME: "GRADE 06 ELA - RESEARCH (IAB)" }
//         , { TEST: "IAB", CODE: "CAIS_IAB_ELA_07_RSRCH", NAME: "GRADE 07 ELA - RESEARCH (IAB)" }
//         , { TEST: "IAB", CODE: "CAIS_IAB_ELA_08_RSRCH", NAME: "GRADE 08 ELA - RESEARCH (IAB)" }
         , { TEST: "IAB", CODE: "CAIS_IAB_ELA_HS_RSRCH", NAME: "HIGH SCHOOL ELA - RESEARCH (IAB)" }
         , { TEST: "IAB", CODE: "CAIS_IAB_ELA_03_RSRCH", NAME: "GRADE 3 ELA - RESEARCH (IAB)" }
         , { TEST: "IAB", CODE: "CAIS_IAB_ELA_04_RSRCH", NAME: "GRADE 4 ELA - RESEARCH (IAB)" }
         , { TEST: "IAB", CODE: "CAIS_IAB_ELA_05_RSRCH", NAME: "GRADE 5 ELA - RESEARCH (IAB)" }
         , { TEST: "IAB", CODE: "CAIS_IAB_ELA_06_RSRCH", NAME: "GRADE 6 ELA - RESEARCH (IAB)" }
         , { TEST: "IAB", CODE: "CAIS_IAB_ELA_07_RSRCH", NAME: "GRADE 7 ELA - RESEARCH (IAB)" }
         , { TEST: "IAB", CODE: "CAIS_IAB_ELA_08_RSRCH", NAME: "GRADE 8 ELA - RESEARCH (IAB)" }

         //RESEARCH INTERPRET AND INTEGRATE
         , { TEST: "IAB", CODE: "CAIS_IAB_ELA_06_RSRCHINTINT", NAME: "GRADE 6 ELA - RESEARCH: INTERPRET AND INTEGRATE (IAB)" }
         , { TEST: "IAB", CODE: "CAIS_IAB_ELA_08_RSRCHINTINT", NAME: "GRADE 8 ELA - RESEARCH: INTERPRET AND INTEGRATE (IAB)" }
         , { TEST: "IAB", CODE: "CAIS_IAB_ELA_07_RSRCHINTINT", NAME: "GRADE 7 ELA - RESEARCH: INTERPRET AND INTEGRATE (IAB)" }
         , { TEST: "IAB", CODE: "CAIS_IAB_ELA_06_RSRCHINTINT", NAME: "GRADE 6 ELA - RESEARCH: INTERPRET AND INTEGRATE (FIAB)" }
         , { TEST: "IAB", CODE: "CAIS_IAB_ELA_05_RSRCHINTINT", NAME: "GRADE 5 ELA - RESEARCH: INTERPRET AND INTEGRATE (IAB)" }
         , { TEST: "IAB", CODE: "CAIS_IAB_ELA_04_RSRCHINTINT", NAME: "GRADE 4 ELA - RESEARCH: INTERPRET AND INTEGRATE (IAB)" }
         , { TEST: "IAB", CODE: "CAIS_IAB_ELA_03_RSRCHINTINT", NAME: "GRADE 3 ELA - RESEARCH: INTERPRET AND INTEGRATE (IAB)" }
         , { TEST: "IAB", CODE: "CAIS_IAB_ELA_04_RSRCHINTINT", NAME: "GRADE 4 ELA - RESEARCH: INTERPRET AND INTEGRATE (FIAB)" }
         , { TEST: "IAB", CODE: "CAIS_IAB_ELA_HS_RSRCHINTINT", NAME: "HIGH SCHOOL ELA - RESEARCH: INTERPRET AND INTEGRATE (IAB)" }
         //RESEARCH ANALYZE INFORMATION
         , { TEST: "IAB", CODE: "CAIS_IAB_ELA_03_RSRCHANLINFO", NAME: "GRADE 3 ELA - RESEARCH: ANALYZE INFORMATION (IAB)" }
         , { TEST: "IAB", CODE: "CAIS_IAB_ELA_04_RSRCHANLINFO", NAME: "GRADE 4 ELA - RESEARCH: ANALYZE INFORMATION (IAB)" }
         , { TEST: "IAB", CODE: "CAIS_IAB_ELA_05_RSRCHANLINFO", NAME: "GRADE 5 ELA - RESEARCH: ANALYZE INFORMATION (IAB)" }
         , { TEST: "IAB", CODE: "CAIS_IAB_ELA_06_RSRCHANLINFO", NAME: "GRADE 6 ELA - RESEARCH: ANALYZE INFORMATION (IAB)" }
         , { TEST: "IAB", CODE: "CAIS_IAB_ELA_07_RSRCHANLINFO", NAME: "GRADE 7 ELA - RESEARCH: ANALYZE INFORMATION (IAB)" }
         , { TEST: "IAB", CODE: "CAIS_IAB_ELA_08_RSRCHANLINFO", NAME: "GRADE 8 ELA - RESEARCH: ANALYZE INFORMATION (IAB)" }
         , { TEST: "IAB", CODE: "CAIS_IAB_ELA_HS_RSRCHANLINFO", NAME: "HIGH SCHOOL ELA - RESEARCH: ANALYZE INFORMATION (IAB)" }

         //RESEARCH: ANALYZE AND INTEGRATE INFORMATION
         , { TEST: "IAB", CODE: "CAIS_IAB_ELA_06_RSANLINTINFO", NAME: "GRADE 6 ELA - RESEARCH: ANALYZE AND INTEGRATE INFORMATION (FIAB)" }
         , { TEST: "IAB", CODE: "CAIS_IAB_ELA_07_RSANLINTINFO", NAME: "GRADE 7 ELA - RESEARCH: ANALYZE AND INTEGRATE INFORMATION (FIAB)" }
         , { TEST: "IAB", CODE: "CAIS_IAB_ELA_08_RSANLINTINFO", NAME: "GRADE 8 ELA - RESEARCH: ANALYZE AND INTEGRATE INFORMATION (FIAB)" }
         , { TEST: "IAB", CODE: "CAIS_IAB_ELA_06_RSANLINTINFO", NAME: "GRADE 6 ELA - RESEARCH: ANALYZE AND INTEGRATE INFORMATION (IAB)" }
         , { TEST: "IAB", CODE: "CAIS_IAB_ELA_07_RSANLINTINFO", NAME: "GRADE 7 ELA - RESEARCH: ANALYZE AND INTEGRATE INFORMATION (IAB)" }
         , { TEST: "IAB", CODE: "CAIS_IAB_ELA_08_RSANLINTINFO", NAME: "GRADE 8 ELA - RESEARCH: ANALYZE AND INTEGRATE INFORMATION (IAB)" }
         , { TEST: "IAB", CODE: "CAIS_IAB_ELA_HS_RSANLINTINFO", NAME: "HIGH SCHOOL ELA - RESEARCH: ANALYZE AND INTEGRATE INFORMATION (IAB)" }
         , { TEST: "IAB", CODE: "CAIS_IAB_ELA_HS_RSANLINTINFO", NAME: "HIGH SCHOOL ELA - RESEARCH: ANALYZE AND INTEGRATE INFORMATION (FIAB)" }

         //Research: Evaluate Information and Sources
         , { TEST: "IAB", CODE: "CAIS_IAB_ELA_06_RSRCHEVALINFOSRC", NAME: "GRADE 6 ELA - RESEARCH: EVALUATE INFORMATION AND SOURCES (IAB)" }
         , { TEST: "IAB", CODE: "CAIS_IAB_ELA_07_RSRCHEVALINFOSRC", NAME: "GRADE 7 ELA - RESEARCH: EVALUATE INFORMATION AND SOURCES (IAB)" }
         , { TEST: "IAB", CODE: "CAIS_IAB_ELA_08_RSRCHEVALINFOSRC", NAME: "GRADE 8 ELA - RESEARCH: EVALUATE INFORMATION AND SOURCES (IAB)" }
         , { TEST: "IAB", CODE: "CAIS_IAB_ELA_HS_RSRCHEVALINFOSRC", NAME: "HIGH SCHOOL ELA - RESEARCH: EVALUATE INFORMATION AND SOURCES (IAB)" }
         , { TEST: "IAB", CODE: "CAIS_IAB_ELA_06_RSRCHEVALINFOSRC", NAME: "GRADE 6 ELA - RESEARCH: EVALUATE INFORMATION AND SOURCES (FIAB)" }
         , { TEST: "IAB", CODE: "CAIS_IAB_ELA_07_RSRCHEVALINFOSRC", NAME: "GRADE 7 ELA - RESEARCH: EVALUATE INFORMATION AND SOURCES (FIAB)" }
         , { TEST: "IAB", CODE: "CAIS_IAB_ELA_08_RSRCHEVALINFOSRC", NAME: "GRADE 8 ELA - RESEARCH: EVALUATE INFORMATION AND SOURCES (FIAB)" }
         , { TEST: "IAB", CODE: "CAIS_IAB_ELA_HS_RSRCHEVALINFOSRC", NAME: "HIGH SCHOOL ELA - RESEARCH: EVALUATE INFORMATION AND SOURCES (FIAB)" }

         //RESEARCH: USE EVIDENCE
         , { TEST: "IAB", CODE: "CAIS_IAB_ELA_03_RSRCHUEV", NAME: "GRADE 3 ELA - RESEARCH: USE EVIDENCE (IAB)" }
         , { TEST: "IAB", CODE: "CAIS_IAB_ELA_04_RSRCHUEV", NAME: "GRADE 4 ELA - RESEARCH: USE EVIDENCE (IAB)" }
         , { TEST: "IAB", CODE: "CAIS_IAB_ELA_05_RSRCHUEV", NAME: "GRADE 5 ELA - RESEARCH: USE EVIDENCE (IAB)" }
         , { TEST: "IAB", CODE: "CAIS_IAB_ELA_06_RSRCHUEV", NAME: "GRADE 6 ELA - RESEARCH: USE EVIDENCE (IAB)" }
         , { TEST: "IAB", CODE: "CAIS_IAB_ELA_07_RSRCHUEV", NAME: "GRADE 7 ELA - RESEARCH: USE EVIDENCE (IAB)" }
         , { TEST: "IAB", CODE: "CAIS_IAB_ELA_08_RSRCHUEV", NAME: "GRADE 8 ELA - RESEARCH: USE EVIDENCE (IAB)" }
         , { TEST: "IAB", CODE: "CAIS_IAB_ELA_HS_RSRCHUEV", NAME: "HIGH SCHOOL ELA - RESEARCH: USE EVIDENCE (IAB)" }

         //RESEARCH: EVALUTE INFORMATION AND SOURCES
         , { TEST: "IAB", CODE: "CAIS_IAB_ELA_HS_EVALINFOSRC", NAME: "HIGH SCHOOL ELA - RESEARCH: EVALUATE INFORMATION AND SOURCES (IAB)" }

         //Write and Revise Informational Texts
         , { TEST: "IAB", CODE: "CAIS_IAB_ELA_03_WTRVINFTXT", NAME: "GRADE 3 ELA - WRITE AND REVISE INFORMATIONAL TEXTS" }
         , { TEST: "IAB", CODE: "CAIS_IAB_ELA_04_WTRVINFTXT", NAME: "GRADE 4 ELA - WRITE AND REVISE INFORMATIONAL TEXTS" }
         , { TEST: "IAB", CODE: "CAIS_IAB_ELA_05_WTRVINFTXT", NAME: "GRADE 5 ELA - WRITE AND REVISE INFORMATIONAL TEXTS" }

         , { TEST: "IAB", CODE: "CAIS_IAB_ELA_03_WTRVINFTXT", NAME: "GRADE 3 ELA - WRITE AND REVISE INFORMATIONAL TEXTS (IAB)" }
         , { TEST: "IAB", CODE: "CAIS_IAB_ELA_04_WTRVINFTXT", NAME: "GRADE 4 ELA - WRITE AND REVISE INFORMATIONAL TEXTS (IAB)" }
         , { TEST: "IAB", CODE: "CAIS_IAB_ELA_05_WTRVINFTXT", NAME: "GRADE 5 ELA - WRITE AND REVISE INFORMATIONAL TEXTS (IAB)" }

         //Write and Revise Opinion Texts
          , { TEST: "IAB", CODE: "CAIS_IAB_ELA_03_WTRVOPTXT", NAME: "GRADE 3 ELA - WRITE AND REVISE OPINION TEXTS" }
          , { TEST: "IAB", CODE: "CAIS_IAB_ELA_04_WTRVOPTXT", NAME: "GRADE 4 ELA - WRITE AND REVISE OPINION TEXTS" }
          , { TEST: "IAB", CODE: "CAIS_IAB_ELA_05_WTRVOPTXT", NAME: "GRADE 5 ELA - WRITE AND REVISE OPINION TEXTS" }

          , { TEST: "IAB", CODE: "CAIS_IAB_ELA_03_WTRVOPTXT", NAME: "GRADE 3 ELA - WRITE AND REVISE OPINION TEXTS (IAB)" }
          , { TEST: "IAB", CODE: "CAIS_IAB_ELA_04_WTRVOPTXT", NAME: "GRADE 4 ELA - WRITE AND REVISE OPINION TEXTS (IAB)" }
          , { TEST: "IAB", CODE: "CAIS_IAB_ELA_05_WTRVOPTXT", NAME: "GRADE 5 ELA - WRITE AND REVISE OPINION TEXTS (IAB)" }

         //Write and Revise Argumentative Texts
         , { TEST: "IAB", CODE: "CAIS_IAB_ELA_07_WTRVARGTXT", NAME: "GRADE 7 ELA - WRITE AND REVISE OPINION TEXTS" }
         , { TEST: "IAB", CODE: "CAIS_IAB_ELA_HS_WTRVARGTXT", NAME: "HIGH SCHOOL ELA - WRITE AND REVISE OPINION TEXTS" }
         , { TEST: "IAB", CODE: "CAIS_IAB_ELA_HS_WTANDRVARGTXT", NAME: "HIGH SCHOOL ELA - WRITE AND REVISE ARGUMENTATIVE TEXTS (IAB)" }
         , { TEST: "IAB", CODE: "CAIS_IAB_ELA_06_WTANDRVARGTXT", NAME: "GRADE 6 ELA - WRITE AND REVISE ARGUMENTATIVE TEXTS (IAB)" }


         //VOLUME OF CYLINDERS,CONES AND SPHERES
         , { TEST: "IAB", CODE: "CAIS_IAB_MATH_08_VOCCAS", NAME: "GRADE 8 MATH - VOLUME OF CYLINDERS, CONES, AND SPHERES (IAB)" }
         //OPERATIONS AND ALGEBRAIC THINKING
         , { TEST: "IAB", CODE: "CAIS_IAB_MATH_03_OAA", NAME: "GRADE 3 MATH - OPERATIONS AND ALGEBRAIC THINKING (IAB)" }
         , { TEST: "IAB", CODE: "CAIS_IAB_MATH_04_OAA", NAME: "GRADE 4 MATH - OPERATIONS AND ALGEBRAIC THINKING (IAB)" }
         , { TEST: "IAB", CODE: "CAIS_IAB_MATH_05_OAA", NAME: "GRADE 5 MATH - OPERATIONS AND ALGEBRAIC THINKING (IAB)" }
         //GEOMETRY
//         , { TEST: "IAB", CODE: "CAIS_IAB_MATH_03_GEOM", NAME: "GRADE 03 MATH - GEOMETRY (IAB)" }
//         , { TEST: "IAB", CODE: "CAIS_IAB_MATH_04_GEOM", NAME: "GRADE 04 MATH - GEOMETRY (IAB)" }
//         , { TEST: "IAB", CODE: "CAIS_IAB_MATH_05_GEOM", NAME: "GRADE 05 MATH - GEOMETRY (IAB)" }
//         , { TEST: "IAB", CODE: "CAIS_IAB_MATH_06_GEOM", NAME: "GRADE 06 MATH - GEOMETRY (IAB)" }
//         , { TEST: "IAB", CODE: "CAIS_IAB_MATH_07_GEOM", NAME: "GRADE 07 MATH - GEOMETRY (IAB)" }
//         , { TEST: "IAB", CODE: "CAIS_IAB_MATH_08_GEOM", NAME: "GRADE 08 MATH - GEOMETRY (IAB)" }
         , { TEST: "IAB", CODE: "CAIS_IAB_MATH_03_GEOM", NAME: "GRADE 3 MATH - GEOMETRY (IAB)" }
         , { TEST: "IAB", CODE: "CAIS_IAB_MATH_04_GEOM", NAME: "GRADE 4 MATH - GEOMETRY (IAB)" }
         , { TEST: "IAB", CODE: "CAIS_IAB_MATH_05_GEOM", NAME: "GRADE 5 MATH - GEOMETRY (IAB)" }
         , { TEST: "IAB", CODE: "CAIS_IAB_MATH_06_GEOM", NAME: "GRADE 6 MATH - GEOMETRY (IAB)" }
         , { TEST: "IAB", CODE: "CAIS_IAB_MATH_07_GEOM", NAME: "GRADE 7 MATH - GEOMETRY (IAB)" }
         , { TEST: "IAB", CODE: "CAIS_IAB_MATH_08_GEOM", NAME: "GRADE 8 MATH - GEOMETRY (IAB)" }

         //NUMBER AND OPERATIONS - FRACTIONS
//         , { TEST: "IAB", CODE: "CAIS_IAB_MATH_03_NUMOP_FRAC", NAME: "GRADE 03 MATH - NUMBER AND OPERATIONS - FRACTIONS (IAB)" }
//         , { TEST: "IAB", CODE: "CAIS_IAB_MATH_04_NUMOP_FRAC", NAME: "GRADE 04 MATH - NUMBER AND OPERATIONS - FRACTIONS (IAB)" }
//         , { TEST: "IAB", CODE: "CAIS_IAB_MATH_05_NUMOP_FRAC", NAME: "GRADE 05 MATH - NUMBER AND OPERATIONS - FRACTIONS (IAB)" }
         , { TEST: "IAB", CODE: "CAIS_IAB_MATH_03_NUMOP_FRAC", NAME: "GRADE 3 MATH - NUMBER AND OPERATIONS - FRACTIONS (IAB)" }
         , { TEST: "IAB", CODE: "CAIS_IAB_MATH_04_NUMOP_FRAC", NAME: "GRADE 4 MATH - NUMBER AND OPERATIONS - FRACTIONS (IAB)" }
         , { TEST: "IAB", CODE: "CAIS_IAB_MATH_05_NUMOP_FRAC", NAME: "GRADE 5 MATH - NUMBER AND OPERATIONS - FRACTIONS (IAB)" }

         //NUMBER AND OPERATIONS IN BASE TEN
//         , { TEST: "IAB", CODE: "CAIS_IAB_MATH_03_NUMOP_B10", NAME: "GRADE 03 MATH - NUMBER AND OPERATIONS IN BASE TEN (IAB)" }
//         , { TEST: "IAB", CODE: "CAIS_IAB_MATH_04_NUMOP_B10", NAME: "GRADE 04 MATH - NUMBER AND OPERATIONS IN BASE TEN (IAB)" }
//         , { TEST: "IAB", CODE: "CAIS_IAB_MATH_05_NUMOP_B10", NAME: "GRADE 05 MATH - NUMBER AND OPERATIONS IN BASE TEN (IAB)" }
         , { TEST: "IAB", CODE: "CAIS_IAB_MATH_03_NUMOP_B10", NAME: "GRADE 3 MATH - NUMBER AND OPERATIONS IN BASE TEN (IAB)" }
         , { TEST: "IAB", CODE: "CAIS_IAB_MATH_04_NUMOP_B10", NAME: "GRADE 4 MATH - NUMBER AND OPERATIONS IN BASE TEN (IAB)" }
         , { TEST: "IAB", CODE: "CAIS_IAB_MATH_05_NUMOP_B10", NAME: "GRADE 5 MATH - NUMBER AND OPERATIONS IN BASE TEN (IAB)" }
         , { TEST: "IAB", CODE: "CAIS_IAB_MATH_03_NUMOP_B10", NAME: "GRADE 3 MATH - NUMBER AND OPERATIONS IN BASE TEN (FIAB)" }
         , { TEST: "IAB", CODE: "CAIS_IAB_MATH_04_NUMOP_B10", NAME: "GRADE 4 MATH - NUMBER AND OPERATIONS IN BASE TEN (FIAB)" }
         , { TEST: "IAB", CODE: "CAIS_IAB_MATH_05_NUMOP_B10", NAME: "GRADE 5 MATH - NUMBER AND OPERATIONS IN BASE TEN (FIAB)" }
         //Factors and Multiples
         , { TEST: "IAB", CODE: "CAIS_IAB_MATH_04_FACT_MULTI", NAME: "GRADE 4 MATH - FACTORS AND MULTIPLES (IAB)" }
         //Analyze and Solve Linear Equations
         , { TEST: "IAB", CODE: "CAIS_IAB_MATH_08_ANLSOLEQ", NAME: "GRADE 8 MATH - ANALYZE AND SOLVE LINEAR EQUATIONS (IAB)" }
         //Rational Number System II
         , { TEST: "IAB", CODE: "CAIS_IAB_MATH_06_RATNUM_II", NAME: "GRADE 6 MATH - RATIONAL NUMBER SYSTEM II (IAB)" }
         //RATIOS AND PROPORTIONAL RELATIONSHIPS
//         , { TEST: "IAB", CODE: "CAIS_IAB_MATH_06_RATIO", NAME: "GRADE 06 MATH - RATIOS AND PROPORTIONAL RELATIONSHIPS (IAB)" }
//         , { TEST: "IAB", CODE: "CAIS_IAB_MATH_07_RATIO", NAME: "GRADE 07 MATH - RATIOS AND PROPORTIONAL RELATIONSHIPS (IAB)" }
         , { TEST: "IAB", CODE: "CAIS_IAB_MATH_06_RATIO", NAME: "GRADE 6 MATH - RATIOS AND PROPORTIONAL RELATIONSHIPS (IAB)" }
         , { TEST: "IAB", CODE: "CAIS_IAB_MATH_07_RATIO", NAME: "GRADE 7 MATH - RATIOS AND PROPORTIONAL RELATIONSHIPS (IAB)" }
         //PROPORTIONAL RELATIONSHIPS
         , { TEST: "IAB", CODE: "CAIS_IAB_MATH_08_PROPREL", NAME: "GRADE 8 MATH - PROPORTIONAL RELATIONSHIPS, LINES, AND LINEAR EQUATIONS (IAB)" }
         //EQUATIONS AND INEQUALITIES: QUADRATIC
         , { TEST: "IAB", CODE: "CAIS_IAB_MATH_HS_EIQ", NAME: "HIGH SCHOOL MATH - SOLVE EQUATIONS AND INEQUALITIES: QUADRATIC (IAB)" }
         //EQUATIONS AND INEQUALITIES: LINEAR AND EXPONENTIAL
         , { TEST: "IAB", CODE: "CAIS_IAB_MATH_HS_EILE", NAME: "HIGH SCHOOL MATH - SOLVE EQUATIONS AND INEQUALITIES: LINEAR AND EXPONENTIAL (IAB)" }
         //EQUATIONS AND REASONING
         , { TEST: "IAB", CODE: "CAIS_IAB_MATH_HS_ER", NAME: "HIGH SCHOOL MATH - EQUATIONS AND REASONING (IAB)" }

        //Place Value
        , { TEST: "IAB", CODE: "CAIS_IAB_MATH_03_MDPVO", NAME: "GRADE 3 MATH - MULTIDIGIT ARITHMETIC: PLACE VALUE AND OPERATIONS (IAB)" }
        , { TEST: "IAB", CODE: "CAIS_IAB_MATH_04_MDPVO", NAME: "GRADE 4 MATH - MULTIDIGIT ARITHMETIC: PLACE VALUE AND OPERATIONS (IAB)" }
        , { TEST: "IAB", CODE: "CAIS_IAB_MATH_05_MDPVO", NAME: "GRADE 5 MATH - MULTIDIGIT ARITHMETIC: PLACE VALUE AND OPERATIONS (IAB)" }

        , { TEST: "IAB", CODE: "CAIS_IAB_MATH_03_MDPVWN", NAME: "GRADE 3 MATH - PLACE VALUE AND MULTIDIGIT WHOLE NUMBERS (IAB)" }
        , { TEST: "IAB", CODE: "CAIS_IAB_MATH_04_MDPVWN", NAME: "GRADE 4 MATH - PLACE VALUE AND MULTIDIGIT WHOLE NUMBERS (IAB)" }
        , { TEST: "IAB", CODE: "CAIS_IAB_MATH_05_MDPVWN", NAME: "GRADE 5 MATH - PLACE VALUE AND MULTIDIGIT WHOLE NUMBERS (IAB)" }

        , { TEST: "IAB", CODE: "CAIS_IAB_MATH_03_MDPVS", NAME: "GRADE 3 MATH - PLACE VALUE SYSTEM (IAB)" }
        , { TEST: "IAB", CODE: "CAIS_IAB_MATH_04_MDPVS", NAME: "GRADE 4 MATH - PLACE VALUE SYSTEM (IAB)" }
        , { TEST: "IAB", CODE: "CAIS_IAB_MATH_05_MDPVS", NAME: "GRADE 5 MATH - PLACE VALUE SYSTEM (IAB)" }

        , { TEST: "IAB", CODE: "CAIS_IAB_MATH_06_MDNFM", NAME: "GRADE 6 MATH - MULTIDIGIT NUMBERS, FACTORS, AND MULTIPLES (IAB)" }
        , { TEST: "IAB", CODE: "CAIS_IAB_MATH_HS_CELE", NAME: "HIGH SCHOOL MATH - CREATE EQUATIONS: LINEAR AND EXPONENTIAL (IAB)" }

        //One-Variable Expressions and Equations
         , { TEST: "IAB", CODE: "CAIS_IAB_MATH_06_OVEE", NAME: "GRADE 6 MATH - ONE-VARIABLE EXPRESSIONS AND EQUATIONS (IAB)" }
         , { TEST: "IAB", CODE: "CAIS_IAB_MATH_06_OVEE", NAME: "GRADE 6 MATH - ONE VARIABLE EXPRESSIONS AND EQUATIONS (IAB)" }
         , { TEST: "IAB", CODE: "CAIS_IAB_MATH_06_OVEE", NAME: "GRADE 6 MATH - ONE VARIABLE EXPRESSIONS AND EQUATIONS (FIAB)" }
         , { TEST: "IAB", CODE: "CAIS_IAB_MATH_06_OVEE", NAME: "GRADE 6 MATH - ONE-VARIABLE EXPRESSIONS AND EQUATIONS (FIAB)" }
         , { TEST: "IAB", CODE: "CAIS_IAB_MATH_07_OVEE", NAME: "GRADE 7 MATH - ONE-VARIABLE EXPRESSIONS AND EQUATIONS (IAB)" }
         , { TEST: "IAB", CODE: "CAIS_IAB_MATH_08_OVEE", NAME: "HIGH SCHOOL MATH - CREATE EQUATIONS: LINEAR AND EXPONENTIAL (IAB)" }

         //THE NUMBER SYSTEM
//         , { TEST: "IAB", CODE: "CAIS_IAB_MATH_06_NUMSYS", NAME: "GRADE 06 MATH - THE NUMBER SYSTEM (IAB)" }
//         , { TEST: "IAB", CODE: "CAIS_IAB_MATH_07_NUMSYS", NAME: "GRADE 07 MATH - THE NUMBER SYSTEM (IAB)" }
//         , { TEST: "IAB", CODE: "CAIS_IAB_MATH_08_NUMSYS", NAME: "GRADE 08 MATH - THE NUMBER SYSTEM (IAB)" }
         , { TEST: "IAB", CODE: "CAIS_IAB_MATH_06_NUMSYS", NAME: "GRADE 6 MATH - THE NUMBER SYSTEM (IAB)" }
         , { TEST: "IAB", CODE: "CAIS_IAB_MATH_07_NUMSYS", NAME: "GRADE 7 MATH - THE NUMBER SYSTEM (IAB)" }
         , { TEST: "IAB", CODE: "CAIS_IAB_MATH_08_NUMSYS", NAME: "GRADE 8 MATH - THE NUMBER SYSTEM (IAB)" }

         //MEASUREMENT AND DATA
//         , { TEST: "IAB", CODE: "CAIS_IAB_MATH_03_MEAS", NAME: "GRADE 03 MATH - MEASUREMENT AND DATA (IAB)" }
//         , { TEST: "IAB", CODE: "CAIS_IAB_MATH_04_MEAS", NAME: "GRADE 04 MATH - MEASUREMENT AND DATA (IAB)" }
//         , { TEST: "IAB", CODE: "CAIS_IAB_MATH_05_MEAS", NAME: "GRADE 05 MATH - MEASUREMENT AND DATA (IAB)" }
         , { TEST: "IAB", CODE: "CAIS_IAB_MATH_03_MEAS", NAME: "GRADE 3 MATH - MEASUREMENT AND DATA (IAB)" }
         , { TEST: "IAB", CODE: "CAIS_IAB_MATH_04_MEAS", NAME: "GRADE 4 MATH - MEASUREMENT AND DATA (IAB)" }
         , { TEST: "IAB", CODE: "CAIS_IAB_MATH_05_MEAS", NAME: "GRADE 5 MATH - MEASUREMENT AND DATA (IAB)" }

         //EXPRESSIONS AND EQUATIONS
//         , { TEST: "IAB", CODE: "CAIS_IAB_MATH_06_EXP", NAME: "GRADE 06 MATH - EXPRESSIONS AND EQUATIONS (IAB)" }
//         , { TEST: "IAB", CODE: "CAIS_IAB_MATH_07_EXP", NAME: "GRADE 07 MATH - EXPRESSIONS AND EQUATIONS (IAB)" }
//         , { TEST: "IAB", CODE: "CAIS_IAB_MATH_08_EXP1", NAME: "GRADE 08 MATH - EXPRESSIONS AND EQUATIONS I (IAB)" }
//         , { TEST: "IAB", CODE: "CAIS_IAB_MATH_08_EXP2", NAME: "GRADE 08 MATH - EXPRESSIONS AND EQUATIONS II (IAB)" }
         , { TEST: "IAB", CODE: "CAIS_IAB_MATH_06_EXP", NAME: "GRADE 6 MATH - EXPRESSIONS AND EQUATIONS (IAB)" }
         , { TEST: "IAB", CODE: "CAIS_IAB_MATH_07_EXP", NAME: "GRADE 7 MATH - EXPRESSIONS AND EQUATIONS (IAB)" }
         , { TEST: "IAB", CODE: "CAIS_IAB_MATH_08_EXP", NAME: "GRADE 8 MATH - EXPRESSIONS AND EQUATIONS (IAB)" }
         , { TEST: "IAB", CODE: "CAIS_IAB_MATH_08_EXP1", NAME: "GRADE 8 MATH - EXPRESSIONS AND EQUATIONS I (IAB)" }
         , { TEST: "IAB", CODE: "CAIS_IAB_MATH_08_EXP2", NAME: "GRADE 8 MATH - EXPRESSIONS AND EQUATIONS II (IAB)" }

         // EQUIVALENT EXPRESSIONS
         , { TEST: "IAB", CODE: "CAIS_IAB_MATH_07_EQUEXP", NAME: "GRADE 7 MATH - EQUIVALENT EXPRESSIONS (IAB)" }
         , { TEST: "IAB", CODE: "CAIS_IAB_MATH_08_EQUEXP", NAME: "GRADE 8 MATH - EQUIVALENT EXPRESSIONS (IAB)" }

         //STATISTICS AND PROBABILITY
//         , { TEST: "IAB", CODE: "CAIS_IAB_MATH_06_STATP", NAME: "GRADE 06 MATH - STATISTICS AND PROBABILITY (IAB)" }
//         , { TEST: "IAB", CODE: "CAIS_IAB_MATH_07_STATP", NAME: "GRADE 07 MATH - STATISTICS AND PROBABILITY (IAB)" }
         , { TEST: "IAB", CODE: "CAIS_IAB_MATH_HS_STATP", NAME: "HIGH SCHOOL MATH - STATISTICS AND PROBABILITY (IAB)" }
         , { TEST: "IAB", CODE: "CAIS_IAB_MATH_06_STATP", NAME: "GRADE 6 MATH - STATISTICS AND PROBABILITY (IAB)" }
         , { TEST: "IAB", CODE: "CAIS_IAB_MATH_07_STATP", NAME: "GRADE 7 MATH - STATISTICS AND PROBABILITY (IAB)" }

         //OTHER MATH
//         , { TEST: "IAB", CODE: "CAIS_IAB_MATH_08_FUNC", NAME: "GRADE 08 MATH - FUNCTIONS (IAB)" }
         , { TEST: "IAB", CODE: "CAIS_IAB_MATH_HS_INTFUNC", NAME: "HIGH SCHOOL MATH - INTERPRETING FUNCTIONS (IAB)" }
         , { TEST: "IAB", CODE: "CAIS_IAB_MATH_HS_ALG1", NAME: "HIGH SCHOOL MATH - ALGEBRA AND FUNCTIONS I (IAB)" }
         , { TEST: "IAB", CODE: "CAIS_IAB_MATH_HS_ALG2", NAME: "HIGH SCHOOL MATH - ALGEBRA AND FUNCTIONS II (IAB)" }
         , { TEST: "IAB", CODE: "CAIS_IAB_MATH_HS_GEOMC", NAME: "HIGH SCHOOL MATH - GEOMETRY CONGRUENCE (IAB)" }
         , { TEST: "IAB", CODE: "CAIS_IAB_MATH_HS_GEOMMM", NAME: "HIGH SCHOOL MATH - GEOMETRY MEASUREMENT AND MODELING (IAB)" }
         , { TEST: "IAB", CODE: "CAIS_IAB_MATH_HS_NQ", NAME: "HIGH SCHOOL MATH - NUMBER AND QUANTITY (IAB)" }
         , { TEST: "IAB", CODE: "CAIS_IAB_MATH_HS_SSEE", NAME: "HIGH SCHOOL MATH - SEEING STRUCTURE IN EXPRESSIONS/POLYNOMIAL EXPRESSIONS (IAB)" }
         , { TEST: "IAB", CODE: "CAIS_IAB_MATH_HS_GEOMRT", NAME: "HIGH SCHOOL MATH - GEOMETRY AND RIGHT TRIANGLE TRIGONOMETRY (IAB)" }
         , { TEST: "IAB", CODE: "CAIS_IAB_MATH_08_FUNC", NAME: "GRADE 8 MATH - FUNCTIONS (IAB)" }

         //MATH PERFORMANCE TASKS
//         , { TEST: "IAB", CODE: "CAIS_IAB_MATH_PERF_03_ORDF", NAME: "GRADE 03 MATH PERFORMANCE TASK - ORDER FORM (IAB)" }
//
//         , { TEST: "IAB", CODE: "CAIS_IAB_MATH_PERF_04_ANJ", NAME: "GRADE 04 MATH PERFORMANCE TASK - ANIMAL JUMPING (IAB)" }
//         , { TEST: "IAB", CODE: "CAIS_IAB_MATH_PERF_05_TURT", NAME: "GRADE 05 MATH PERFORMANCE TASK - TURTLE HABITAT (IAB)" }
//         , { TEST: "IAB", CODE: "CAIS_IAB_MATH_PERF_06_CPP", NAME: "GRADE 06 MATH PERFORMANCE TASK - CELL PHONE PLAN (IAB)" }
//         , { TEST: "IAB", CODE: "CAIS_IAB_MATH_PERF_07_CAMP", NAME: "GRADE 07 MATH PERFORMANCE TASK - CAMPING TASKS (IAB)" }
//         , { TEST: "IAB", CODE: "CAIS_IAB_MATH_PERF_08_BBT", NAME: "GRADE 08 MATH PERFORMANCE TASK - BASEBALL TICKETS (IAB)" }
         , { TEST: "IAB", CODE: "CAIS_IAB_MATH_PERF_HS_TDR", NAME: "HIGH SCHOOL MATH PERFORMANCE TASK - TEEN DRIVING RESTRICTIONS (IAB)" }
         , { TEST: "IAB", CODE: "CAIS_IAB_MATH_PERF_HS_TDR", NAME: "HIGH SCHOOL MATH - PERFORMANCE TASK - TEEN DRIVING RESTRICTIONS (IAB)" }
         , { TEST: "IAB", CODE: "CAIS_IAB_MATH_PERF_03_ORDF", NAME: "GRADE 3 MATH PERFORMANCE TASK - ORDER FORM (IAB)" }
         , { TEST: "IAB", CODE: "CAIS_IAB_MATH_PERF_03_ORDF", NAME: "GRADE 3 MATH - PERFORMANCE TASK - ORDER FORM (IAB)" }
         , { TEST: "IAB", CODE: "CAIS_IAB_MATH_PERF_04_ANJ", NAME: "GRADE 4 MATH PERFORMANCE TASK - ANIMAL JUMPING (IAB)" }
         , { TEST: "IAB", CODE: "CAIS_IAB_MATH_PERF_04_ANJ", NAME: "GRADE 4 MATH - PERFORMANCE TASK - ANIMAL JUMPING (IAB)" }
         , { TEST: "IAB", CODE: "CAIS_IAB_MATH_PERF_05_TURT", NAME: "GRADE 5 MATH PERFORMANCE TASK - TURTLE HABITAT (IAB)" }
         , { TEST: "IAB", CODE: "CAIS_IAB_MATH_PERF_05_TURT", NAME: "GRADE 5 MATH - PERFORMANCE TASK - TURTLE HABITAT (IAB)" }
         , { TEST: "IAB", CODE: "CAIS_IAB_MATH_PERF_06_CPP", NAME: "GRADE 6 MATH PERFORMANCE TASK - CELL PHONE PLAN (IAB)" }
         , { TEST: "IAB", CODE: "CAIS_IAB_MATH_PERF_06_CPP", NAME: "GRADE 6 MATH - PERFORMANCE TASK - CELL PHONE PLAN (IAB)" }
         , { TEST: "IAB", CODE: "CAIS_IAB_MATH_PERF_07_CAMP", NAME: "GRADE 7 MATH PERFORMANCE TASK - CAMPING TASKS (IAB)" }
         , { TEST: "IAB", CODE: "CAIS_IAB_MATH_PERF_07_CAMP", NAME: "GRADE 7 MATH - PERFORMANCE TASK - CAMPING TASKS (IAB)" }
         , { TEST: "IAB", CODE: "CAIS_IAB_MATH_PERF_08_BBT", NAME: "GRADE 8 MATH PERFORMANCE TASK - BASEBALL TICKETS (IAB)" }
         , { TEST: "IAB", CODE: "CAIS_IAB_MATH_PERF_08_BBT", NAME: "GRADE 8 MATH - PERFORMANCE TASK - BASEBALL TICKETS (IAB)" }

         //2019 NEW MATH
         , { TEST: "IAB", CODE: "CAIS_IAB_MATH_03_FOIRS", NAME: "GRADE 3 MATH - FOUR OPERATIONS: INTERPRET, REPRESENT, AND SOLVE (IAB)" }
         , { TEST: "IAB", CODE: "CAIS_IAB_MATH_04_FOIRS", NAME: "GRADE 4 MATH - FOUR OPERATIONS: INTERPRET, REPRESENT, AND SOLVE (IAB)" }
         , { TEST: "IAB", CODE: "CAIS_IAB_MATH_03_MUDIVIRS", NAME: "GRADE 3 MATH - MULTIPLICATION AND DIVISION: INTERPRET, REPRESENT, AND SOLVE (IAB)" }//NEW
         , { TEST: "IAB", CODE: "CAIS_IAB_MATH_PERF_04_ANJ", NAME: "GRADE 4 MATH - PERFORMANCE TASK - ANIMAL JUMPING (IAB)" }
         , { TEST: "IAB", CODE: "CAIS_IAB_MATH_04_FEO", NAME: "GRADE 4 MATH - FRACTION EQUIVALENCE AND ORDERING (IAB)" }
         , { TEST: "IAB", CODE: "CAIS_IAB_MATH_04_FDN", NAME: "GRADE 4 MATH - FRACTIONS AND DECIMAL NOTATION (IAB)" }
         , { TEST: "IAB", CODE: "CAIS_IAB_MATH_05_NUMEX", NAME: "GRADE 5 MATH - NUMERICAL EXPRESSIONS (IAB)" }
         , { TEST: "IAB", CODE: "CAIS_IAB_MATH_05_ASEF", NAME: "GRADE 5 MATH - ADD AND SUBTRACT WITH EQUIVALENT FRACTIONS (IAB)" }

         , { TEST: "IAB", CODE: "CAIS_IAB_MATH_05_OWND", NAME: "GRADE 5 MATH - OPERATIONS WITH WHOLE NUMBERS AND DECIMALS (IAB)" }
         , { TEST: "IAB", CODE: "CAIS_IAB_MATH_03_MD100", NAME: "GRADE 3 MATH - MULTIPLY AND DIVIDE WITHIN 100 (IAB)" }
         , { TEST: "IAB", CODE: "CAIS_IAB_MATH_06_DBF", NAME: "GRADE 6 MATH - DIVIDE FRACTIONS BY FRACTIONS (IAB)" }
         , { TEST: "IAB", CODE: "CAIS_IAB_MATH_03_PMD", NAME: "GRADE 3 MATH - PROPERTIES OF MULTIPLICATION AND DIVISION (IAB)" }
         , { TEST: "IAB", CODE: "CAIS_IAB_MATH_07_AEE", NAME: "GRADE 7 MATH - ALGEBRAIC EXPRESSIONS AND EQUATIONS (IAB)" }
         , { TEST: "IAB", CODE: "CAIS_IAB_MATH_06_DIV", NAME: "GRADE 6 MATH - DEPENDENT AND INDEPENDENT VARIABLES (IAB)" }
         , { TEST: "IAB", CODE: "CAIS_IAB_MATH_08_CS", NAME: "GRADE 8 MATH - CONGRUENCE AND SIMILARITY (IAB)" }

         //Multiplication and Division: Interpret, Represent, and Solve
         , { TEST: "IAB", CODE: "CAIS_IAB_MATH_07_MUDIVIRS", NAME: "GRADE 7 MATH - MULTIPLICATION AND DIVISION: INTERPRET, REPRESENT, AND SOLVE" }

         // Time, Volume, and Mass
         , { TEST: "IAB", CODE: "CAIS_IAB_MATH_03_TVM", NAME: "GRADE 3 MATH - TIME, VOLUME, AND MASS (IAB)" }
         , { TEST: "IAB", CODE: "CAIS_IAB_MATH_07_TVM", NAME: "GRADE 7 MATH - TIME, VOLUME, AND MASS" }

         //Linear and Area Measurement*
         , { TEST: "IAB", CODE: "CAIS_IAB_MATH_03_LAM", NAME: "GRADE 3 MATH - LINEAR AND AREA MEASUREMENT (IAB)" }
         , { TEST: "IAB", CODE: "CAIS_IAB_MATH_07_LAM", NAME: "GRADE 7 MATH - LINEAR AND AREA MEASUREMENT" }

         //Generate and Analyze Patterns
         , { TEST: "IAB", CODE: "CAIS_IAB_MATH_04_GAP", NAME: "GRADE 4 MATH - GENERATE AND ANALYZE PATTERNS" }
         , { TEST: "IAB", CODE: "CAIS_IAB_MATH_04_GAP", NAME: "GRADE 4 MATH - GENERATE AND ANALYZE PATTERNS (IAB)" }

         //Build Fractions from Unit Fractions
         , { TEST: "IAB", CODE: "CAIS_IAB_MATH_04_BFUF", NAME: "GRADE 4 MATH - BUILD FRACTIONS FROM UNIT FRACTIONS" }
         , { TEST: "IAB", CODE: "CAIS_IAB_MATH_04_BFUF", NAME: "GRADE 4 MATH - BUILD FRACTIONS FROM UNIT FRACTIONS (IAB)" }

         //Add & Subtract with Equivalent Fractions
         , { TEST: "IAB", CODE: "CAIS_IAB_MATH_05_ADDSUBWEF", NAME: "GRADE 5 MATH - ADD & SUBTRACT WITH EQUIVALENT FRACTIONS" }

         //Convert Measurements
         , { TEST: "IAB", CODE: "CAIS_IAB_MATH_05_CONVMEA", NAME: "GRADE 5 MATH - CONVERT MEASUREMENTS" }
         , { TEST: "IAB", CODE: "CAIS_IAB_MATH_05_CONVMEA", NAME: "GRADE 5 MATH - CONVERT MEASUREMENTS (IAB)" }

         //Volume Concepts
         , { TEST: "IAB", CODE: "CAIS_IAB_MATH_05_VOLCON", NAME: "GRADE 5 MATH - VOLUME CONCEPTS" }
         , { TEST: "IAB", CODE: "CAIS_IAB_MATH_05_VOLCON", NAME: "GRADE 5 MATH - VOLUME CONCEPTS (IAB)" }

         //Angles, Areas, and Volume
         , { TEST: "IAB", CODE: "CAIS_IAB_MATH_07_ANGARVOL", NAME: "GRADE 7 MATH - ANGLES, AREAS AND VOLUME" }
         , { TEST: "IAB", CODE: "CAIS_IAB_MATH_07_ANGARVOL", NAME: "GRADE 7 MATH - ANGLES, AREAS, AND VOLUME (IAB)" }

         //Algebraic expressions
         , { TEST: "IAB", CODE: "CAIS_IAB_MATH_07_ALGEXP", NAME: "GRADE 7 MATH - ALGEBRAIC EXPRESSIONS" }
         , { TEST: "IAB", CODE: "CAIS_IAB_MATH_06_ALGEXP", NAME: "GRADE 6 MATH - ALGEBRAIC EXPRESSIONS (IAB)" }

         //Create Equations: Quadratic
         , { TEST: "IAB", CODE: "CAIS_IAB_MATH_HS_CEQUA", NAME: "GRADE 7 MATH - CREATE EQUATIONS: QUADRATIC" }



         //2019 NEW ELA
         , { TEST: "IAB", CODE: "CAIS_IAB_MATH_07_GF", NAME: "GRADE 7 MATH - GEOMETRIC FIGURES (IAB)" }
         , { TEST: "IAB", CODE: "CAIS_IAB_ELA_05_WRN", NAME: "GRADE 5 ELA - WRITE AND REVISE NARRATIVES (IAB)" }
         , { TEST: "IAB", CODE: "CAIS_IAB_ELA_05_WRN", NAME: "GRADE 5 ELA - WRITE AND REVISE NARRATIVES (FIAB)" }
         , { TEST: "IAB", CODE: "CAIS_IAB_ELA_03_WTREVEXPTES", NAME: "GRADE 3 ELA - WRITE AND REVISE EXPLANATORY TEXTS (IAB)" }
         , { TEST: "IAB", CODE: "CAIS_IAB_ELA_04_WTREVEXPTES", NAME: "GRADE 4 ELA - WRITE AND REVISE EXPLANATORY TEXTS (IAB)" }
         , { TEST: "IAB", CODE: "CAIS_IAB_ELA_05_WTREVEXPTES", NAME: "GRADE 5 ELA - WRITE AND REVISE EXPLANATORY TEXTS (IAB)" }
         , { TEST: "IAB", CODE: "CAIS_IAB_ELA_06_WTREVEXPTES", NAME: "GRADE 6 ELA - WRITE AND REVISE EXPLANATORY TEXTS (IAB)" }
         , { TEST: "IAB", CODE: "CAIS_IAB_ELA_07_WTREVEXPTES", NAME: "GRADE 7 ELA - WRITE AND REVISE EXPLANATORY TEXTS (IAB)" }
         , { TEST: "IAB", CODE: "CAIS_IAB_ELA_08_WTREVEXPTES", NAME: "GRADE 8 ELA - WRITE AND REVISE EXPLANATORY TEXTS (IAB)" }
         , { TEST: "IAB", CODE: "CAIS_IAB_ELA_09_WTREVEXPTES", NAME: "GRADE 9 ELA - WRITE AND REVISE EXPLANATORY TEXTS (IAB)" }
         , { TEST: "IAB", CODE: "CAIS_IAB_ELA_10_WTREVEXPTES", NAME: "GRADE 10 ELA - WRITE AND REVISE EXPLANATORY TEXTS (IAB)" }
         , { TEST: "IAB", CODE: "CAIS_IAB_ELA_11_WTREVEXPTES", NAME: "GRADE 11 ELA - WRITE AND REVISE EXPLANATORY TEXTS (IAB)" }
         , { TEST: "IAB", CODE: "CAIS_IAB_ELA_12_WTREVEXPTES", NAME: "GRADE 12 ELA - WRITE AND REVISE EXPLANATORY TEXTS (IAB)" }

         //ICA ELA INTERIM COMPREHENSIVE
//         , { TEST: "ICA", CODE: "CAIS_ICA_ELA_03_COMP", NAME: "GRADE 03 ELA INTERIM COMPREHENSIVE (ICA)" }
//         , { TEST: "ICA", CODE: "CAIS_ICA_ELA_04_COMP", NAME: "GRADE 04 ELA INTERIM COMPREHENSIVE (ICA)" }
//         , { TEST: "ICA", CODE: "CAIS_ICA_ELA_05_COMP", NAME: "GRADE 05 ELA INTERIM COMPREHENSIVE (ICA)" }
//         , { TEST: "ICA", CODE: "CAIS_ICA_ELA_06_COMP", NAME: "GRADE 06 ELA INTERIM COMPREHENSIVE (ICA)" }
//         , { TEST: "ICA", CODE: "CAIS_ICA_ELA_07_COMP", NAME: "GRADE 07 ELA INTERIM COMPREHENSIVE (ICA)" }
//         , { TEST: "ICA", CODE: "CAIS_ICA_ELA_08_COMP", NAME: "GRADE 08 ELA INTERIM COMPREHENSIVE (ICA)" }
         , { TEST: "ICA", CODE: "CAIS_ICA_ELA_03_COMP", NAME: "GRADE 3 ELA INTERIM COMPREHENSIVE (ICA)" }
         , { TEST: "ICA", CODE: "CAIS_ICA_ELA_04_COMP", NAME: "GRADE 4 ELA INTERIM COMPREHENSIVE (ICA)" }
         , { TEST: "ICA", CODE: "CAIS_ICA_ELA_05_COMP", NAME: "GRADE 5 ELA INTERIM COMPREHENSIVE (ICA)" }
         , { TEST: "ICA", CODE: "CAIS_ICA_ELA_06_COMP", NAME: "GRADE 6 ELA INTERIM COMPREHENSIVE (ICA)" }
         , { TEST: "ICA", CODE: "CAIS_ICA_ELA_07_COMP", NAME: "GRADE 7 ELA INTERIM COMPREHENSIVE (ICA)" }
         , { TEST: "ICA", CODE: "CAIS_ICA_ELA_08_COMP", NAME: "GRADE 8 ELA INTERIM COMPREHENSIVE (ICA)" }
//         , { TEST: "ICA", CODE: "CAIS_ICA_ELA_03_COMP", NAME: "GRADE 03 ELA" }
//         , { TEST: "ICA", CODE: "CAIS_ICA_ELA_04_COMP", NAME: "GRADE 04 ELA" }
//         , { TEST: "ICA", CODE: "CAIS_ICA_ELA_05_COMP", NAME: "GRADE 05 ELA" }
//         , { TEST: "ICA", CODE: "CAIS_ICA_ELA_06_COMP", NAME: "GRADE 06 ELA" }
//         , { TEST: "ICA", CODE: "CAIS_ICA_ELA_07_COMP", NAME: "GRADE 07 ELA" }
//         , { TEST: "ICA", CODE: "CAIS_ICA_ELA_08_COMP", NAME: "GRADE 08 ELA" }
         , { TEST: "ICA", CODE: "CAIS_ICA_ELA_03_COMP", NAME: "GRADE 3 ELA" }
         , { TEST: "ICA", CODE: "CAIS_ICA_ELA_03_COMP", NAME: "GRADE 3 ELA ICA" }
         , { TEST: "ICA", CODE: "CAIS_ICA_ELA_04_COMP", NAME: "GRADE 4 ELA" }
         , { TEST: "ICA", CODE: "CAIS_ICA_ELA_04_COMP", NAME: "GRADE 4 ELA ICA" }
         , { TEST: "ICA", CODE: "CAIS_ICA_ELA_05_COMP", NAME: "GRADE 5 ELA" }
         , { TEST: "ICA", CODE: "CAIS_ICA_ELA_05_COMP", NAME: "GRADE 5 ELA ICA" }
         , { TEST: "ICA", CODE: "CAIS_ICA_ELA_06_COMP", NAME: "GRADE 6 ELA" }
         , { TEST: "ICA", CODE: "CAIS_ICA_ELA_06_COMP", NAME: "GRADE 6 ELA ICA" }
         , { TEST: "ICA", CODE: "CAIS_ICA_ELA_07_COMP", NAME: "GRADE 7 ELA" }
         , { TEST: "ICA", CODE: "CAIS_ICA_ELA_07_COMP", NAME: "GRADE 7 ELA ICA" }
         , { TEST: "ICA", CODE: "CAIS_ICA_ELA_08_COMP", NAME: "GRADE 8 ELA" }
         , { TEST: "ICA", CODE: "CAIS_ICA_ELA_08_COMP", NAME: "GRADE 8 ELA ICA" }
         , { TEST: "ICA", CODE: "CAIS_ICA_ELA_03_COMP", NAME: "GRADE 3 ELA - INTERIM ASSESSMENT (ICA)" }
         , { TEST: "ICA", CODE: "CAIS_ICA_ELA_03_COMP", NAME: "GRADE 3 ELA - INTERIM COMPREHENSIVE ASSESSMENT (ICA)" }
         , { TEST: "ICA", CODE: "CAIS_ICA_ELA_04_COMP", NAME: "GRADE 4 ELA - INTERIM ASSESSMENT (ICA)" }
         , { TEST: "ICA", CODE: "CAIS_ICA_ELA_04_COMP", NAME: "GRADE 4 ELA - INTERIM COMPREHENSIVE ASSESSMENT (ICA)" }
         , { TEST: "ICA", CODE: "CAIS_ICA_ELA_05_COMP", NAME: "GRADE 5 ELA - INTERIM ASSESSMENT (ICA)" }
         , { TEST: "ICA", CODE: "CAIS_ICA_ELA_05_COMP", NAME: "GRADE 5 ELA - INTERIM COMPREHENSIVE ASSESSMENT (ICA)" }
         , { TEST: "ICA", CODE: "CAIS_ICA_ELA_06_COMP", NAME: "GRADE 6 ELA - INTERIM ASSESSMENT (ICA)" }
         , { TEST: "ICA", CODE: "CAIS_ICA_ELA_06_COMP", NAME: "GRADE 6 ELA - INTERIM COMPREHENSIVE ASSESSMENT (ICA)" }
         , { TEST: "ICA", CODE: "CAIS_ICA_ELA_07_COMP", NAME: "GRADE 7 ELA - INTERIM ASSESSMENT (ICA)" }
         , { TEST: "ICA", CODE: "CAIS_ICA_ELA_07_COMP", NAME: "GRADE 7 ELA - INTERIM COMPREHENSIVE ASSESSMENT (ICA)" }
         , { TEST: "ICA", CODE: "CAIS_ICA_ELA_08_COMP", NAME: "GRADE 8 ELA - INTERIM ASSESSMENT (ICA)" }
         , { TEST: "ICA", CODE: "CAIS_ICA_ELA_08_COMP", NAME: "GRADE 8 ELA - INTERIM COMPREHENSIVE ASSESSMENT (ICA)" }
         , { TEST: "ICA", CODE: "CAIS_ICA_ELA_09_COMP", NAME: "GRADE 9 ELA - INTERIM ASSESSMENT (ICA)" }
         , { TEST: "ICA", CODE: "CAIS_ICA_ELA_10_COMP", NAME: "GRADE 10 ELA - INTERIM ASSESSMENT (ICA)" }
         , { TEST: "ICA", CODE: "CAIS_ICA_ELA_09_COMP", NAME: "GRADE 9 ELA - INTERIM COMPREHENSIVE ASSESSMENT (ICA)" }
         , { TEST: "ICA", CODE: "CAIS_ICA_ELA_10_COMP", NAME: "GRADE 10 ELA - INTERIM COMPREHENSIVE ASSESSMENT (ICA)" }
         , { TEST: "ICA", CODE: "CAIS_ICA_ELA_11_COMP", NAME: "GRADE 11 ELA - INTERIM ASSESSMENT (ICA)" }
         , { TEST: "ICA", CODE: "CAIS_ICA_ELA_11_COMP", NAME: "GRADE 11 ELA - INTERIM COMPREHENSIVE ASSESSMENT (ICA)" }
         , { TEST: "ICA", CODE: "CAIS_ICA_ELA_HS_COMP", NAME: "HIGH SCHOOL ELA ICA" }

         //ICA MATH INTERIM COMPREHENSIVE
//         , { TEST: "ICA", CODE: "CAIS_ICA_MATH_03_COMP", NAME: "GRADE 03 MATH INTERIM COMPREHENSIVE (ICA)" }
//         , { TEST: "ICA", CODE: "CAIS_ICA_MATH_04_COMP", NAME: "GRADE 04 MATH INTERIM COMPREHENSIVE (ICA)" }
//         , { TEST: "ICA", CODE: "CAIS_ICA_MATH_05_COMP", NAME: "GRADE 05 MATH INTERIM COMPREHENSIVE (ICA)" }
//         , { TEST: "ICA", CODE: "CAIS_ICA_MATH_06_COMP", NAME: "GRADE 06 MATH INTERIM COMPREHENSIVE (ICA)" }
//         , { TEST: "ICA", CODE: "CAIS_ICA_MATH_07_COMP", NAME: "GRADE 07 MATH INTERIM COMPREHENSIVE (ICA)" }
//         , { TEST: "ICA", CODE: "CAIS_ICA_MATH_08_COMP", NAME: "GRADE 08 MATH INTERIM COMPREHENSIVE (ICA)" }
         , { TEST: "ICA", CODE: "CAIS_ICA_MATH_03_COMP", NAME: "GRADE 3 MATH INTERIM COMPREHENSIVE (ICA)" }
         , { TEST: "ICA", CODE: "CAIS_ICA_MATH_03_COMP", NAME: "GRADE 3 MATH - INTERIM COMPREHENSIVE ASSESSMENT (ICA)" }
         , { TEST: "ICA", CODE: "CAIS_ICA_MATH_04_COMP", NAME: "GRADE 4 MATH INTERIM COMPREHENSIVE (ICA)" }
         , { TEST: "ICA", CODE: "CAIS_ICA_MATH_04_COMP", NAME: "GRADE 4 MATH - INTERIM COMPREHENSIVE ASSESSMENT (ICA)" }
         , { TEST: "ICA", CODE: "CAIS_ICA_MATH_05_COMP", NAME: "GRADE 5 MATH INTERIM COMPREHENSIVE (ICA)" }
         , { TEST: "ICA", CODE: "CAIS_ICA_MATH_05_COMP", NAME: "GRADE 5 MATH - INTERIM COMPREHENSIVE ASSESSMENT (ICA)" }
         , { TEST: "ICA", CODE: "CAIS_ICA_MATH_06_COMP", NAME: "GRADE 6 MATH INTERIM COMPREHENSIVE (ICA)" }
         , { TEST: "ICA", CODE: "CAIS_ICA_MATH_06_COMP", NAME: "GRADE 6 MATH - INTERIM COMPREHENSIVE ASSESSMENT (ICA)" }
         , { TEST: "ICA", CODE: "CAIS_ICA_MATH_07_COMP", NAME: "GRADE 7 MATH INTERIM COMPREHENSIVE (ICA)" }
         , { TEST: "ICA", CODE: "CAIS_ICA_MATH_07_COMP", NAME: "GRADE 7 MATH - INTERIM COMPREHENSIVE ASSESSMENT (ICA)" }
         , { TEST: "ICA", CODE: "CAIS_ICA_MATH_08_COMP", NAME: "GRADE 8 MATH INTERIM COMPREHENSIVE (ICA)" }
         , { TEST: "ICA", CODE: "CAIS_ICA_MATH_08_COMP", NAME: "GRADE 8 MATH - INTERIM COMPREHENSIVE ASSESSMENT (ICA)" }
         , { TEST: "ICA", CODE: "CAIS_ICA_MATH_09_COMP", NAME: "GRADE 9 MATH - INTERIM COMPREHENSIVE ASSESSMENT (ICA)" }
         , { TEST: "ICA", CODE: "CAIS_ICA_MATH_10_COMP", NAME: "GRADE 10 MATH - INTERIM COMPREHENSIVE ASSESSMENT (ICA)" }
         , { TEST: "ICA", CODE: "CAIS_ICA_MATH_11_COMP", NAME: "GRADE 11 MATH - INTERIM COMPREHENSIVE ASSESSMENT (ICA)" }
//         , { TEST: "ICA", CODE: "CAIS_ICA_MATH_03_COMP", NAME: "GRADE 03 MATH" }
//         , { TEST: "ICA", CODE: "CAIS_ICA_MATH_04_COMP", NAME: "GRADE 04 MATH" }
//         , { TEST: "ICA", CODE: "CAIS_ICA_MATH_05_COMP", NAME: "GRADE 05 MATH" }
//         , { TEST: "ICA", CODE: "CAIS_ICA_MATH_06_COMP", NAME: "GRADE 06 MATH" }
//         , { TEST: "ICA", CODE: "CAIS_ICA_MATH_07_COMP", NAME: "GRADE 07 MATH" }
//         , { TEST: "ICA", CODE: "CAIS_ICA_MATH_08_COMP", NAME: "GRADE 08 MATH" }
         , { TEST: "ICA", CODE: "CAIS_ICA_MATH_03_COMP", NAME: "GRADE 3 MATH" }
         , { TEST: "ICA", CODE: "CAIS_ICA_MATH_03_COMP", NAME: "GRADE 3 MATH ICA" }
         , { TEST: "ICA", CODE: "CAIS_ICA_MATH_03_COMP", NAME: "GRADE 3 MATH - INTERIM ASSESSMENT (ICA)" }
         , { TEST: "ICA", CODE: "CAIS_ICA_MATH_04_COMP", NAME: "GRADE 4 MATH" }
         , { TEST: "ICA", CODE: "CAIS_ICA_MATH_04_COMP", NAME: "GRADE 4 MATH ICA" }
         , { TEST: "ICA", CODE: "CAIS_ICA_MATH_04_COMP", NAME: "GRADE 4 MATH - INTERIM ASSESSMENT (ICA)" }
         , { TEST: "ICA", CODE: "CAIS_ICA_MATH_05_COMP", NAME: "GRADE 5 MATH" }
         , { TEST: "ICA", CODE: "CAIS_ICA_MATH_05_COMP", NAME: "GRADE 5 MATH ICA" }
         , { TEST: "ICA", CODE: "CAIS_ICA_MATH_05_COMP", NAME: "GRADE 5 MATH - INTERIM ASSESSMENT (ICA)" }
         , { TEST: "ICA", CODE: "CAIS_ICA_MATH_06_COMP", NAME: "GRADE 6 MATH" }
         , { TEST: "ICA", CODE: "CAIS_ICA_MATH_06_COMP", NAME: "GRADE 6 MATH ICA" }
         , { TEST: "ICA", CODE: "CAIS_ICA_MATH_06_COMP", NAME: "GRADE 6 MATH - INTERIM ASSESSMENT (ICA)" }
         , { TEST: "ICA", CODE: "CAIS_ICA_MATH_07_COMP", NAME: "GRADE 7 MATH" }
         , { TEST: "ICA", CODE: "CAIS_ICA_MATH_07_COMP", NAME: "GRADE 7 MATH ICA" }
         , { TEST: "ICA", CODE: "CAIS_ICA_MATH_07_COMP", NAME: "GRADE 7 MATH - INTERIM ASSESSMENT (ICA)" }
         , { TEST: "ICA", CODE: "CAIS_ICA_MATH_08_COMP", NAME: "GRADE 8 MATH" }
         , { TEST: "ICA", CODE: "CAIS_ICA_MATH_08_COMP", NAME: "GRADE 8 MATH ICA" }
         , { TEST: "ICA", CODE: "CAIS_ICA_MATH_08_COMP", NAME: "GRADE 8 MATH - INTERIM ASSESSMENT (ICA)" }
         , { TEST: "ICA", CODE: "CAIS_ICA_MATH_09_COMP", NAME: "GRADE 9 MATH - INTERIM ASSESSMENT (ICA)" }
         , { TEST: "ICA", CODE: "CAIS_ICA_MATH_HS_COMP", NAME: "HIGH SCHOOL MATH" }
         , { TEST: "ICA", CODE: "CAIS_ICA_MATH_HS_COMP", NAME: "HIGH SCHOOL MATH ICA" }
         , { TEST: "ICA", CODE: "CAIS_ICA_MATH_HS_COMP", NAME: "HIGH SCHOOL MATH INTERIM COMPREHENSIVE (ICA)" }
         , { TEST: "CAASPP_PRELIMINARY", CODE: "CAIS_CAASPP_PRELIMINARY_CAST_SCIHS", NAME: "GRADE HS CAST SUMMATIVE" }
         , { TEST: "CAASPP_PRELIMINARY", CODE: "CAIS_CAASPP_PRELIMINARY_CAST_SCI05", NAME: "GRADE 5 CAST SUMMATIVE" }
         , { TEST: "CAASPP_PRELIMINARY", CODE: "CAIS_CAASPP_PRELIMINARY_CAST_SCI08", NAME: "GRADE 8 CAST SUMMATIVE" }
         , { TEST: "CAASPP_PRELIMINARY", CODE: "CAIS_CAASPP_PRELIMINARY_CAST_SCI10", NAME: "GRADE 10 CAST SUMMATIVE" }
         , { TEST: "CAASPP_PRELIMINARY", CODE: "CAIS_CAASPP_PRELIMINARY_CAST_SCI11", NAME: "GRADE 11 CAST SUMMATIVE" }
         , { TEST: "CAASPP_PRELIMINARY", CODE: "CAIS_CAASPP_PRELIMINARY_CAST_SCI12", NAME: "GRADE 12 CAST SUMMATIVE" }

         , { TEST: "CAASPP_PRELIMINARY", CODE: "CAIS_CAASPP_PRELIMINARY_CAA_MA02", NAME: "GRADE 2 CAA MATH SUMMATIVE" }
         , { TEST: "CAASPP_PRELIMINARY", CODE: "CAIS_CAASPP_PRELIMINARY_CAA_MA03", NAME: "GRADE 3 CAA MATH SUMMATIVE" }
         , { TEST: "CAASPP_PRELIMINARY", CODE: "CAIS_CAASPP_PRELIMINARY_CAA_MA04", NAME: "GRADE 4 CAA MATH SUMMATIVE" }
         , { TEST: "CAASPP_PRELIMINARY", CODE: "CAIS_CAASPP_PRELIMINARY_CAA_MA04", NAME: "CAA MATH GRADE 4 SUMMATIVE" }
         , { TEST: "CAASPP_PRELIMINARY", CODE: "CAIS_CAASPP_PRELIMINARY_CAA_MA05", NAME: "GRADE 5 CAA MATH SUMMATIVE" }
         , { TEST: "CAASPP_PRELIMINARY", CODE: "CAIS_CAASPP_PRELIMINARY_CAA_MA06", NAME: "GRADE 6 CAA MATH SUMMATIVE" }
         , { TEST: "CAASPP_PRELIMINARY", CODE: "CAIS_CAASPP_PRELIMINARY_CAA_MA07", NAME: "GRADE 7 CAA MATH SUMMATIVE" }
         , { TEST: "CAASPP_PRELIMINARY", CODE: "CAIS_CAASPP_PRELIMINARY_CAA_MA08", NAME: "GRADE 8 CAA MATH SUMMATIVE" }
         , { TEST: "CAASPP_PRELIMINARY", CODE: "CAIS_CAASPP_PRELIMINARY_CAA_MA08", NAME: "CAA MATH GRADE 8 SUMMATIVE" }
         , { TEST: "CAASPP_PRELIMINARY", CODE: "CAIS_CAASPP_PRELIMINARY_CAA_MA09", NAME: "GRADE 9 CAA MATH SUMMATIVE" }
         , { TEST: "CAASPP_PRELIMINARY", CODE: "CAIS_CAASPP_PRELIMINARY_CAA_MA10", NAME: "GRADE 10 CAA MATH SUMMATIVE" }
         , { TEST: "CAASPP_PRELIMINARY", CODE: "CAIS_CAASPP_PRELIMINARY_CAA_MA11", NAME: "GRADE 11 CAA MATH SUMMATIVE" }
         , { TEST: "CAASPP_PRELIMINARY", CODE: "CAIS_CAASPP_PRELIMINARY_CAA_MA12", NAME: "GRADE 12 CAA MATH SUMMATIVE" }

         , { TEST: "CAASPP_PRELIMINARY", CODE: "CAIS_CAASPP_PRELIMINARY_CAA_ELA02", NAME: "GRADE 2 CAA ELA SUMMATIVE" }
         , { TEST: "CAASPP_PRELIMINARY", CODE: "CAIS_CAASPP_PRELIMINARY_CAA_ELA03", NAME: "GRADE 3 CAA ELA SUMMATIVE" }
         , { TEST: "CAASPP_PRELIMINARY", CODE: "CAIS_CAASPP_PRELIMINARY_CAA_ELA04", NAME: "GRADE 4 CAA ELA SUMMATIVE" }
         , { TEST: "CAASPP_PRELIMINARY", CODE: "CAIS_CAASPP_PRELIMINARY_CAA_ELA04", NAME: "CAA ELA GRADE 4 SUMMATIVE" }
         , { TEST: "CAASPP_PRELIMINARY", CODE: "CAIS_CAASPP_PRELIMINARY_CAA_ELA05", NAME: "GRADE 5 CAA ELA SUMMATIVE" }
         , { TEST: "CAASPP_PRELIMINARY", CODE: "CAIS_CAASPP_PRELIMINARY_CAA_ELA06", NAME: "GRADE 6 CAA ELA SUMMATIVE" }
         , { TEST: "CAASPP_PRELIMINARY", CODE: "CAIS_CAASPP_PRELIMINARY_CAA_ELA07", NAME: "GRADE 7 CAA ELA SUMMATIVE" }
         , { TEST: "CAASPP_PRELIMINARY", CODE: "CAIS_CAASPP_PRELIMINARY_CAA_ELA08", NAME: "GRADE 8 CAA ELA SUMMATIVE" }
         , { TEST: "CAASPP_PRELIMINARY", CODE: "CAIS_CAASPP_PRELIMINARY_CAA_ELA08", NAME: "CAA ELA GRADE 8 SUMMATIVE" }
         , { TEST: "CAASPP_PRELIMINARY", CODE: "CAIS_CAASPP_PRELIMINARY_CAA_ELA09", NAME: "GRADE 9 CAA ELA SUMMATIVE" }
         , { TEST: "CAASPP_PRELIMINARY", CODE: "CAIS_CAASPP_PRELIMINARY_CAA_ELA10", NAME: "GRADE 10 CAA ELA SUMMATIVE" }
         , { TEST: "CAASPP_PRELIMINARY", CODE: "CAIS_CAASPP_PRELIMINARY_CAA_ELA11", NAME: "GRADE 11 CAA ELA SUMMATIVE" }
         , { TEST: "CAASPP_PRELIMINARY", CODE: "CAIS_CAASPP_PRELIMINARY_CAA_ELA12", NAME: "GRADE 12 CAA ELA SUMMATIVE" }

         , { TEST: "CA", CODE: "CAIS_CACSA03", NAME: "GRADE 3 CSA SUMMATIVE" }
         , { TEST: "CA", CODE: "CAIS_CACSA04", NAME: "GRADE 4 CSA SUMMATIVE" }
         , { TEST: "CA", CODE: "CAIS_CACSA05", NAME: "GRADE 5 CSA SUMMATIVE" }
         , { TEST: "CA", CODE: "CAIS_CACSA06", NAME: "GRADE 6 CSA SUMMATIVE" }
         , { TEST: "CA", CODE: "CAIS_CACSA07", NAME: "GRADE 7 CSA SUMMATIVE" }
         , { TEST: "CA", CODE: "CAIS_CACSA08", NAME: "GRADE 8 CSA SUMMATIVE" }
         , { TEST: "CA", CODE: "CAIS_CACSAHS", NAME: "GRADE HS CSA SUMMATIVE" }
         , { TEST: "CAASPP_PRELIMINARY", CODE: "CAIS_CAASPP_PRELIMINARY_GR03_MA", NAME: "GRADE 3 MATH SUMMATIVE" }
         , { TEST: "CAASPP_PRELIMINARY", CODE: "CAIS_CAASPP_PRELIMINARY_GR04_MA", NAME: "GRADE 4 MATH SUMMATIVE" }
         , { TEST: "CAASPP_PRELIMINARY", CODE: "CAIS_CAASPP_PRELIMINARY_GR05_MA", NAME: "GRADE 5 MATH SUMMATIVE" }
         , { TEST: "CAASPP_PRELIMINARY", CODE: "CAIS_CAASPP_PRELIMINARY_GR06_MA", NAME: "GRADE 6 MATH SUMMATIVE" }
         , { TEST: "CAASPP_PRELIMINARY", CODE: "CAIS_CAASPP_PRELIMINARY_GR07_MA", NAME: "GRADE 7 MATH SUMMATIVE" }
         , { TEST: "CAASPP_PRELIMINARY", CODE: "CAIS_CAASPP_PRELIMINARY_GR08_MA", NAME: "GRADE 8 MATH SUMMATIVE" }
         , { TEST: "CAASPP_PRELIMINARY", CODE: "CAIS_CAASPP_PRELIMINARY_GR09_MA", NAME: "GRADE 9 MATH SUMMATIVE" }
         , { TEST: "CAASPP_PRELIMINARY", CODE: "CAIS_CAASPP_PRELIMINARY_GR10_MA", NAME: "GRADE 10 MATH SUMMATIVE" }
         , { TEST: "CAASPP_PRELIMINARY", CODE: "CAIS_CAASPP_PRELIMINARY_GR11_MA", NAME: "GRADE 11 MATH SUMMATIVE" }
         , { TEST: "CAASPP_PRELIMINARY", CODE: "CAIS_CAASPP_PRELIMINARY_GR12_MA", NAME: "GRADE 12 MATH SUMMATIVE" }
         , { TEST: "CAASPP_PRELIMINARY", CODE: "CAIS_CAASPP_PRELIMINARY_GR11_MA",  NAME: "Math Summative Grade 11" }

         , { TEST: "ELPAC", CODE: "CAIS_ELPAC_SE_OVR_KG", NAME: "KINDERGARTEN ELPAC SUMMATIVE" }
         , { TEST: "ELPAC", CODE: "CAIS_ELPAC_SE_OVR_01", NAME: "GRADE 1 ELPAC SUMMATIVE" }
         , { TEST: "ELPAC", CODE: "CAIS_ELPAC_SE_OVR_02", NAME: "GRADE 2 ELPAC SUMMATIVE" }
         , { TEST: "ELPAC", CODE: "CAIS_ELPAC_SE_OVR_03", NAME: "GRADE 3 ELPAC SUMMATIVE" }
         , { TEST: "ELPAC", CODE: "CAIS_ELPAC_SE_OVR_04", NAME: "GRADE 4 ELPAC SUMMATIVE" }
         , { TEST: "ELPAC", CODE: "CAIS_ELPAC_SE_OVR_05", NAME: "GRADE 5 ELPAC SUMMATIVE" }
         , { TEST: "ELPAC", CODE: "CAIS_ELPAC_SE_OVR_06", NAME: "GRADE 6 ELPAC SUMMATIVE" }
         , { TEST: "ELPAC", CODE: "CAIS_ELPAC_SE_OVR_07", NAME: "GRADE 7 ELPAC SUMMATIVE" }
         , { TEST: "ELPAC", CODE: "CAIS_ELPAC_SE_OVR_08", NAME: "GRADE 8 ELPAC SUMMATIVE" }
         , { TEST: "ELPAC", CODE: "CAIS_ELPAC_SE_OVR_09", NAME: "GRADE 9 ELPAC SUMMATIVE" }
         , { TEST: "ELPAC", CODE: "CAIS_ELPAC_SE_OVR_10", NAME: "GRADE 10 ELPAC SUMMATIVE" }
         , { TEST: "ELPAC", CODE: "CAIS_ELPAC_SE_OVR_11", NAME: "GRADE 11 ELPAC SUMMATIVE" }
         , { TEST: "ELPAC", CODE: "CAIS_ELPAC_SE_OVR_12", NAME: "GRADE 12 ELPAC SUMMATIVE" }
         , { TEST: "CAASPP_PRELIMINARY", CODE: "CAIS_CAASPP_PRELIMINARY_GR01_ELA", NAME: "GRADE 1 ELA SUMMATIVE" }
         , { TEST: "CAASPP_PRELIMINARY", CODE: "CAIS_CAASPP_PRELIMINARY_GR02_ELA", NAME: "GRADE 2 ELA SUMMATIVE" }
         , { TEST: "CAASPP_PRELIMINARY", CODE: "CAIS_CAASPP_PRELIMINARY_GR03_ELA", NAME: "GRADE 3 ELA SUMMATIVE" }
         , { TEST: "CAASPP_PRELIMINARY", CODE: "CAIS_CAASPP_PRELIMINARY_GR04_ELA", NAME: "GRADE 4 ELA SUMMATIVE" }
         , { TEST: "CAASPP_PRELIMINARY", CODE: "CAIS_CAASPP_PRELIMINARY_GR05_ELA", NAME: "GRADE 5 ELA SUMMATIVE" }
         , { TEST: "CAASPP_PRELIMINARY", CODE: "CAIS_CAASPP_PRELIMINARY_GR06_ELA", NAME: "GRADE 6 ELA SUMMATIVE" }
         , { TEST: "CAASPP_PRELIMINARY", CODE: "CAIS_CAASPP_PRELIMINARY_GR07_ELA", NAME: "GRADE 7 ELA SUMMATIVE" }
         , { TEST: "CAASPP_PRELIMINARY", CODE: "CAIS_CAASPP_PRELIMINARY_GR08_ELA", NAME: "GRADE 8 ELA SUMMATIVE" }
         , { TEST: "CAASPP_PRELIMINARY", CODE: "CAIS_CAASPP_PRELIMINARY_GR09_ELA", NAME: "GRADE 9 ELA SUMMATIVE" }
         , { TEST: "CAASPP_PRELIMINARY", CODE: "CAIS_CAASPP_PRELIMINARY_GR10_ELA", NAME: "GRADE 10 ELA SUMMATIVE" }
         , { TEST: "CAASPP_PRELIMINARY", CODE: "CAIS_CAASPP_PRELIMINARY_GR11_ELA", NAME: "GRADE 11 ELA SUMMATIVE" }
         , { TEST: "CAASPP_PRELIMINARY", CODE: "CAIS_CAASPP_PRELIMINARY_GR12_ELA", NAME: "GRADE 12 ELA SUMMATIVE" }
      ];

   /***************************************************************************
   Assessment-specific decodes
   ***************************************************************************/
   var perfLevels =
      [
         { LEVEL: '4', DESC: 'Standard Exceeded', PASS_IND: 'Yes' },
         { LEVEL: '3', DESC: 'Standard Met', PASS_IND: 'Yes' },
         { LEVEL: '2', DESC: 'Standard Nearly Met', PASS_IND: 'No' },
         { LEVEL: '1', DESC: 'Standard Not Met', PASS_IND: 'No' },
         { LEVEL: '9', DESC: 'Did not attempt', PASS_IND: 'No' },
         { LEVEL: 'Range 1', DESC: 'Range 1', PASS_IND: 'No' },//for CSA
         { LEVEL: 'Range 2', DESC: 'Range 2', PASS_IND: 'Yes' },
         { LEVEL: 'Range 3', DESC: 'Range 3', PASS_IND: 'Yes' },

         { LEVEL: 'Standard Not Met (Level 1)', DESC: 'Did Not Meet Standard', PASS_IND: 'No', CODE: '1' },
         { LEVEL: 'Standard Nearly Met (Level 2)', DESC: 'Nearly Met Standard', PASS_IND: 'No', CODE: '2' },
         { LEVEL: 'Standard Met (Level 3)', DESC: 'Met Standard', PASS_IND: 'Yes', CODE: '3' },
         { LEVEL: 'Standard Exceeded (Level 4)', DESC: 'Exceeded Standard', PASS_IND: 'Yes', CODE: '4' },
         { LEVEL: "", DESC: null, PASS_IND: null, CODE: null},
         { LEVEL: null, DESC: null, PASS_IND: null, CODE: null},
         { LEVEL: undefined, DESC: null, PASS_IND: null, CODE: null}
      ];

    var claimLevels =
        {
            "3" : {LEVEL: "3", DESC: "Above Standard", PASS_IND: "Yes"},
            "2" : {LEVEL: "2", DESC: "At/Near Standard", PASS_IND: "No"},
            "1" : {LEVEL: "1", DESC: "Below Standard", PASS_IND: "No"},
            "9" : {LEVEL: "9", DESC: "Did not attempt", PASS_IND: "No"},
            "Below Standard" : {LEVEL: "1", DESC: "Below Standard", PASS_IND: "No"},
            "Near Standard" : {LEVEL: "2", DESC: "At/Near Standard", PASS_IND: "No"},
            "Above Standard" : {LEVEL: "3", DESC: "Above Standard", PASS_IND: "Yes"}
        };

   var gradeLookup = {
      "KN": "KG"
      , "KG": "KG"
      , "01": "01"
      , "1": "01"
      , "G1": "01"
      , "02": "02"
      , "2": "02"
      , "G2": "02"
      , "03": "03"
      , "3": "03"
      , "G3": "03"
      , "04": "04"
      , "4": "04"
      , "G4": "04"
      , "05": "05"
      , "5": "05"
      , "G5":"05"
      , "06": "06"
      , "6": "06"
      , "G6": "06"
      , "07": "07"
      , "7": "07"
      , "G7": "07"
      , "08": "08"
      , "8": "08"
      , "G8": "08"
      , "09": "09"
      , "9": "09"
      , "G9": "09"
      , "10": "10"
      , "G10": "10"
      , "11": "11"
      , "G11": "11"
      , "12": "12"
      , "G12": "12"
      , "T9": "T9"
      , "15": "15"
      , "20": "PS"
      , "PS": "PS"
      , "24": "PK"
      , "PK": "PK"
      , "25": "KG"
      , "35": "35"
      , null: null
      , "": null
   };

    var months = {
      "01": "JAN",
      "02": "FEB",
      "03": "MAR",
      "04": "APR",
      "05": "MAY",
      "06": "JUNE",
      "07": "JULY",
      "08": "AUG",
      "09": "SEPT",
      "10": "OCT",
      "11": "NOV",
      "12": "DEC",
      "":   null,
      null: null
    };

   /***********************************************************************************
   Assessment-specific decode functions
   ***********************************************************************************/

   function decodeTestNumber(testName) {
      var modName = testName;
      if (modName.toString().indexOf("FIAB") > -1) {
         modName = modName.toString().replace("FIAB", "IAB");
      }
      if (modName.toString().indexOf("0") > -1 && modName.toString().indexOf("00") == -1  && modName.toString().indexOf("10") == -1) {
         modName = modName.toString().replace("0", "");
      }
      modName = modName.toString().toUpperCase();
      var result = testNameDecode.getItem(modName.replace("  ", " "));
      if (result == null || result == undefined) {
         return null;
      }

      return result.CODE;
   }
   function decodeTestName(testName) {
      var modName = testName;
      if (modName.toString().indexOf("FIAB") > -1) {
         modName = modName.toString().replace("FIAB", "IAB");
      }
      if (modName.toString().indexOf("0") > -1 && modName.toString().indexOf("00") == -1 && modName.toString().indexOf("10") == -1) {
         modName = modName.toString().replace("0", "");
      }
      modName = modName.toString().toUpperCase();
      var result = testNameDecode.getItem(modName.replace("  ", " "));
      if (result == null || result == undefined) {
         return null;
      }

      return result.NAME;
   }
   function decodePrimaryResultCode(perfLevel) {
      if (perfLevel == null || perfLevel == undefined || perfLevel === "") {
         return null;
      }
      var result = perLevelDecode.getItem(perfLevel);
      if (result == null || result == undefined || result === "") {
         return null;
      }
      return result;
   }

   function decodeGradeCode(gradeCode) {
      if (gradeCode == null) {
         return null;
      }
      var lkpGradeObj = gradeLookup[gradeCode];
      if (lkpGradeObj == undefined || lkpGradeObj == null) {
         return null;
      }
      return lkpGradeObj;
   }

   /***********************************************************************************
   Assessment-specific mapping functions
   ***********************************************************************************/

   /**
   * Maps normalized records for given group of rows.
   *
   * @param signature The java signature of the file
   * @param hierarchy A JSON object containing file hierarchy values
   * @param rows A JSON array of record objects being processed
   * @returns {Array}
   */
   function mapNormalizedRecords(signature, hierarchy, rows) {

      scoresToMap.forEach(
         //e = Element, i = Index, a = Array
         function (e, i, a) {
            testNameDecode.setItem(e.NAME, e);
         }
      );

      perfLevels.forEach(
         //e = Element, i = Index, a = Array
         function (e, i, a) {
            perLevelDecode.setItem(e.LEVEL, e);
         }
      );


      var normalizedRecords = [];
      var row = AppSignatureFieldDetails.getFieldDetailsParser(signature, rows[0]);
      var record = mapNormalizedRecord(signature, hierarchy, row);

      AppUtil.nullSafePush(normalizedRecords, record);

      return normalizedRecords;
   }

   /**
   * Map a normalized record for given row and set of administration metadata.
   *
   * @param signature The java signature of the file
   * @param hierarchy A JSON object containing file hierarchy values
   * @param row A JSON object containing row values being processed
   * @returns {Object}
   */
   function mapNormalizedRecord(signature, hierarchy, row) {

      var record = {};
      var mappingObject = {};

      var fileGrade = getGradeFromFilename(row);

      mappingObject.ADMIN_MAPPINGS = {};
      mappingObject.SCORE_MAPPINGS = [];
      mappingObject.ASSESSMENT_METADATA = {};
      mappingObject.ASSESSMENT_METADATA.TESTS = [];
      mappingObject.ASSESSMENT_METADATA.BENCHMARKS = [];

      //Map normalized admin fields
      record = mapNormalizedAdminFields(signature, hierarchy, row);

      //Map non-normalized admin fields
      mappingObject.ADMIN_MAPPINGS = mapAdditionalAdminFields(row, hierarchy);

      //Map score fields for each expected score mapping
      try {
          var fileName = row.getRawField("LINEAGE_FILE").toString().toUpperCase();
          let testMetadata = null;
          scoresToMap.forEach(function (objectTest) {
             if (objectTest.NAME === decodeTestName(row.getField('ASSESSMENTNAME'))) {
                testMetadata = objectTest;
             }
          });
        let score = mapTotalScore(row);
        AppUtil.nullSafePush(mappingObject.SCORE_MAPPINGS, score);
        //check the 6 claim strands
        for (let i = 1; i <= 6; i++) {
           let claimScore = mapClaimScore(row, i);
           AppUtil.nullSafePush(mappingObject.SCORE_MAPPINGS, claimScore);
        }
        for (let i = 1; i <= 6; i++) {
           let altScore = mapAltScore(row, i);
           AppUtil.nullSafePush(mappingObject.SCORE_MAPPINGS, altScore);
        }

    } catch (exception) {
         mappingObject.ERROR_MESSAGE = exception.message;
         if (!exception.message) {
            AssessmentLoader.audits.push(AppAudit.writeRejectRecord(hierarchy.SOURCE_FILE.getFilePath(), "HIGH", row.getRawField("LINEAGE_LINE"), "Score mapping error: ${exception}", JSON.stringify(row)));
         }
    }

      // System Fields
      record.ASSESSMENT_JSON_MAPPINGS = JSON.stringify(mappingObject);
      record.LINEAGE_SOURCE = _thisLineageSource;
      record.LINEAGE_SIGNATURE = signature.getFormat().getFormatName();
      record.LINEAGE_FILE = row.getRawField("LINEAGE_FILE");
      record.LINEAGE_LINE = row.getRawField("LINEAGE_LINE");
      return record;
   }

   /***********************************************************************************
   Assessment-specific administration functions
   ***********************************************************************************/

   /**
   * Maps normalized administration fields based on a given set of administration metadata.
   *
   * @param signature The java signature of the file
   * @param hierarchy A JSON object containing file hierarchy values
   * @param row A JSON object containing row values being processed
   */
   function mapNormalizedAdminFields(signature, hierarchy, row) {
      var record = {};
      var normalizedFileFields = AppUtil.getStandardNormalizedFileFields();

      const testDateObj = module.mapDateObject(hierarchy, row, row.getField("SUBMITDATETIME").replace("Sept", "Sep"));
      const birthDateObject = module.mapDateObject(hierarchy, row, row.getField("STUDENT_BIRTHDATE"));

      /*  pre UIHN-9419:
      var districtCode = _util.coalesce(
         row.getField("DISTRICTID")
         , AssessmentLoader.config.DISTRICT_CODE
         , ""
      );

      //District code fields are length 14, 7 district code numbers followed by 7 school code numbers or 7 zeroes
      if (districtCode.length > 7) {
         districtCode = districtCode.substring(0, 7);
      }
      */

      var vndrSchoolID = row.getField("SCHOOLID");
      if (vndrSchoolID !== null && vndrSchoolID !== undefined) {
         // var schoolCode = vndrSchoolID.replace("34" + districtCode, "");  // pre UIHN-9419
         var schoolCode = vndrSchoolID.replace("34" + AssessmentLoader.config.DISTRICT_CODE, "");
         schoolCode = vndrSchoolID.substring(vndrSchoolID.length - 7, vndrSchoolID.length);
      }
      else {
         vndrSchoolID = row.getField("SCHOOLNAME");
         var schoolCode = row.getField("SCHOOLNAME").substring(20);
      }

      normalizedFileFields.forEach(function (field) {
         switch (field) {
            case "ASSESSMENT_ADMIN_KEY":
               record.ASSESSMENT_ADMIN_KEY = generateAssessmentAdminKey(signature, hierarchy, row);
               break;
            case "SYS_PARTITION_VALUE":
               record.SYS_PARTITION_VALUE = _util.coalesce(AssessmentLoader.config.SYS_PARTITION_VALUE, AssessmentLoader.config.TENANT_CODE);
               break;
            case "TENANT_CODE":
               record.TENANT_CODE = AssessmentLoader.config.TENANT_CODE;
               break;
            case "DISTRICT_CODE":
               record.DISTRICT_CODE = AssessmentLoader.config.DISTRICT_CODE; // pre UIHN-9419:  districtCode;
               break;
            case "SCHOOL_YEAR":
               record.SCHOOL_YEAR = hierarchy.SCHOOL_YEAR;
               break;
            case "PARTICIPATION_YEAR":
               record.PARTICIPATION_YEAR = _util.coalesce(row.getField("EDITION"), hierarchy.SCHOOL_YEAR);
               break;
            case "REPORTING_PERIOD":
               record.REPORTING_PERIOD = hierarchy.REPORTING_PERIOD;
               break;
            case "ASSESSMENT_VENDOR":
               record.ASSESSMENT_VENDOR = hierarchy.ASSESSMENT_VENDOR;
               break;
            case "ASSESSMENT_PRODUCT":
               record.ASSESSMENT_PRODUCT = hierarchy.ASSESSMENT_PRODUCT;
               break;
            case "TEST_ADMIN_DATE":
               record.TEST_ADMIN_DATE = testDateObj.STANDARD_DATE;
               break;
            case "STUDENT_DOB_MONTH":
               record.STUDENT_DOB_MONTH = _util.coalesce(birthDateObject.MONTH, null);
               break;
            case "STUDENT_DOB_DAY":
               record.STUDENT_DOB_DAY = _util.coalesce(birthDateObject.DAY, null);
               break;
            case "STUDENT_DOB_YEAR":
               record.STUDENT_DOB_YEAR = _util.coalesce(birthDateObject.YEAR, null);
               break;
            case "SCHOOL_VENDOR_ID":
               record.SCHOOL_VENDOR_ID = _util.coalesce(row.getField("SCHOOLID"), row.getField("SCHOOLNAME"));
               break;
            case "SCHOOL_STATE_ID":
               record.SCHOOL_STATE_ID = _util.coalesce(row.getField("RESPONSIBLE_SCHOOL_CODE"));
               break;
            case "SCHOOL_NAME":
               record.SCHOOL_NAME = _util.coalesce(row.getField("SCHOOLNAME"));
               break;
            case "STUDENT_STATE_ID":
               record.STUDENT_STATE_ID = _util.coalesce(row.getField("STUDENTIDENTIFIER"));
               break;
            case "STUDENT_VENDOR_ID":
               record.STUDENT_VENDOR_ID = _util.coalesce(row.getField("STUDENTIDENTIFIER"));
               break;
            case "STUDENT_FIRST_NAME":
               record.STUDENT_FIRST_NAME = _util.coalesce(row.getField("FIRSTNAME"));
               break;
            case "STUDENT_MIDDLE_NAME":
               record.STUDENT_MIDDLE_NAME = _util.coalesce(row.getField("STUDENT_MIDDLE_INITIAL"));
               break;
            case "STUDENT_LAST_NAME":
               record.STUDENT_LAST_NAME = _util.coalesce(row.getField("LASTORSURNAME"));
               break;
            case "STUDENT_GENDER_CODE":
               record.STUDENT_GENDER_CODE = _util.coalesce(row.getField("GENDER")) !== null ? _util.coalesce(row.getField("GENDER")).substring(0, 1) : null;
               break;
            case "STUDENT_GRADE_CODE":
               record.STUDENT_GRADE_CODE = decodeGradeCode(_util.coalesce(row.getField("GRADELEVELWHENASSESSED")));
               break;
            case "PARTICIPATION_GRADE":
               record.PARTICIPATION_GRADE = decodeGradeCode(_util.coalesce(row.getField("GRADELEVELWHENASSESSED")));
               break;
            default:
               record[field] = row.getField(field);
               break;
         }
      });
      return record;
   }

   /**
   * Maps additional administration fields based on a given set of administration metadata.
   *
   * @param row A JSON object containing row values being processed
   * @returns {{}}
   */
   function mapAdditionalAdminFields(row, hierarchy) {
      var admin = {};
      admin.TEST_INTERVENTION_DESC = _util.trim(row.getField("ASSIGNEDACCOMMODATIONLIST"));
      if (_util.trim(row.getField("ADMINISTRATIONCONDITION")) !== "") {
         admin.TEST_INTERVENTION_DESC_2 = _util.trim(row.getField("ADMINISTRATIONCONDITION"));
      }
      if (_util.trim(row.getField("COMPLETENESS")) !== "") {
         admin.TEST_INTERVENTION_DESC_3 = _util.trim(row.getField("COMPLETENESS"));
      }

      var testDate = module.mapDateObject(hierarchy, row, row.getField("SUBMITDATETIME").replace("Sept", "Sep"));
      var testDateObj = months[testDate.MONTH];

      admin.TEST_INTERVENTION_DESC_4 = testDateObj;

      return admin;
   }

   /***********************************************************************************
   Assessment-specific score functions
   ***********************************************************************************/

   function mapTotalScore(row) {
      let score = {};
      var fileName = row.getRawField("LINEAGE_FILE").toString().toUpperCase();
      let testCode = decodeTestNumber(row.getField('ASSESSMENTNAME'));
      if (testCode === null || testCode === undefined || testCode == "") {
         let errorMessage = "New test detected '" + row.getField('ASSESSMENTNAME');
         print("\n${errorMessage}\n");
         throw new Error(errorMessage);
      }
      let testMetadata = null;
      scoresToMap.forEach(function (objectTest) {
         if (objectTest.NAME === decodeTestName(row.getField('ASSESSMENTNAME'))) {
            testMetadata = objectTest;
         }
      });



      if (testMetadata.NAME !== decodeTestName(row.getField('ASSESSMENTNAME').toString().toUpperCase())) {
         return null;
      }

      let testNumber = testCode;

      let scaleScore = _util.coalesce(row.getField('SCALESCORE'));
      let sem = _util.coalesce(row.getField('SCALESCORESTANDARDERROR'));
      let errorMin = _util.coalesce(row.getField('ERROR_BAND_MIN'));
      let errorMax = _util.coalesce(row.getField('ERROR_BAND_MAX'));
      let primaryResult = _util.coalesce(row.getField('SCALESCOREACHIEVEMENTLEVEL') , row.getField('REPORTING_CATEGORY'));
      let lexileMeasure = _util.coalesce(row.getField("LEXILE_MEASURE"), row.getField('QUANTILE_MEASURE'));
      let lexileMin = _util.coalesce(row.getField("LEXILE_RANGE_MIN"), row.getField('QUANTILE_RANGE_MIN'));
      let lexileMax = _util.coalesce(row.getField("LEXILE_RANGE_MAX"), row.getField('QUANTILE_RANGE_MAX'));
      let secondaryResult = _util.coalesce(row.getField('SCALESCOREACHIEVEMENTLEVEL') , row.getField('REPORTING_CATEGORY'));

      if (scaleScore === null || scaleScore === undefined || scaleScore == "") {
         return null;
      }

      score["TEST_NUMBER"] = testNumber;
      score["TEST_SCORE_TEXT"] = scaleScore;
      score["TEST_SCORE_VALUE"] = scaleScore;
      score["TEST_SCALED_SCORE"] = scaleScore;
      score["TEST_STANDARD_ERROR"] = sem;
      score["TEST_UPPER_BOUND"] = errorMax;
      score["TEST_LOWER_BOUND"] = errorMin;

      var decode = null;
      if(testNumber.indexOf('IAB') > -1){
          decode = claimLevels[primaryResult];
      } else{
          decode = decodePrimaryResultCode(primaryResult);
      }
      if (decode != null && decode != undefined) {
         score["TEST_PRIMARY_RESULT"] = decode.DESC;
         score["TEST_PRIMARY_RESULT_CODE"] = decode.LEVEL;
         score["TEST_PASSED_INDICATOR"] = decode.PASS_IND;
      }
      let claimDecode = claimLevels[primaryResult];
      if(claimDecode != null && claimDecode != undefined){
         score["TEST_CUSTOM_RESULT"] = claimDecode.DESC;
      }
      if(lexileMeasure !== null && lexileMeasure !== "" && lexileMeasure !== undefined){
                  score["TEST_READING_LEVEL"] = lexileMeasure.replace("L","").replace("Q", "");
              }
              if(lexileMin !== null && lexileMin !== "" && lexileMin !== undefined){
                  score["TEST_LOWER_BOUND"] = lexileMin.replace("L","").replace("Q", "");
              }
              if(lexileMax !== null && lexileMax !== "" && lexileMax !== undefined){
                  score["TEST_UPPER_BOUND"] = lexileMax.replace("L","").replace("Q", "");
              }
              return score;
          }

   function mapAltScore(row, altNumber) {

      var score = {};
      var fileName = row.getRawField("LINEAGE_FILE").toString().toUpperCase();
      var testNumber = "";
      var testCode = decodeTestNumber(row.getField('ASSESSMENTNAME'));
      if (testCode === null || testCode === undefined || testCode == "") {
         return null;
      }
      var testMetadata = null;
      scoresToMap.forEach(function (objectTest) {
         if (objectTest.NAME === decodeTestName(row.getField('ASSESSMENTNAME'))) {
            testMetadata = objectTest;
         }
      });


      testNumber = testCode + '_ALT' + altNumber;

      var scaleScore = _util.coalesce(row.getField('ALT' + altNumber + 'ACHIEVEMENTLEVEL'), row.getField('ALT' + altNumber + 'SCOREACHIEVEMENTLEVEL'));
      var primaryResult =  _util.coalesce(row.getField('SCALESCOREACHIEVEMENTLEVEL'), row.getField('REPORTING_CATEGORY'));

      if (scaleScore === null || scaleScore === undefined || scaleScore == "" || scaleScore === "NA") {
         return null;
      }

      score["TEST_NUMBER"] = testNumber;
      score["TEST_SCORE_TEXT"] = scaleScore;
      score["TEST_SCORE_VALUE"] = scaleScore;
      score["TEST_SCALED_SCORE"] = scaleScore;

      var decode = null;
      if(testNumber.indexOf('IAB') > -1){
          decode = claimLevels[primaryResult];
      } else{
          decode = decodePrimaryResultCode(primaryResult);
      }
      if (decode != null && decode != undefined) {
         score["TEST_PRIMARY_RESULT"] = decode.DESC;
         score["TEST_PRIMARY_RESULT_CODE"] = decode.LEVEL;
         score["TEST_PASSED_INDICATOR"] = decode.PASS_IND;
      }
      let claimDecode = claimLevels[primaryResult];
      if(claimDecode != null && claimDecode != undefined){
         score["TEST_CUSTOM_RESULT"] = claimDecode.DESC;
      }
      return score;
   }

   function mapClaimScore(row, claimNumber) {

      var score = {};
      var testNumber = "";
      var fileName = row.getRawField("LINEAGE_FILE").toString().toUpperCase();
      var testCode = decodeTestNumber(row.getField('ASSESSMENTNAME'));
      if (testCode === null || testCode === undefined || testCode == "") {
         return null;
      }
      var testMetadata = null;
      scoresToMap.forEach(function (objectTest) {
         if (objectTest.NAME === decodeTestName(row.getField('ASSESSMENTNAME'))) {
            testMetadata = objectTest;
         }
      });


      testNumber = testCode + '_CLAIM' + claimNumber;
      //check if testMetadata.CODE matches field ASSESSMENTNAME
      if (testMetadata.NAME !== decodeTestName(row.getField('ASSESSMENTNAME').toString().toUpperCase())) {
         return null;
      }

      var scaleScore = _util.coalesce(row.getField('CLAIM' + claimNumber + 'SCOREACHIEVEMENTLEVEL'));

      if (scaleScore === null || scaleScore === undefined || scaleScore == "" || scaleScore === "NA") {
         return null;
      }

      score["TEST_NUMBER"] = testNumber;

      score["TEST_SCORE_VALUE"] = scaleScore;
      score["TEST_SCALED_SCORE"] = scaleScore;
      score["TEST_SCORE_TEXT"] = scaleScore;
      score["TEST_PRIMARY_RESULT_CODE"] = scaleScore;
      var decode = claimLevels[scaleScore];
      if (decode != null && decode != undefined) {
         score["TEST_PRIMARY_RESULT"] = decode.DESC;
         score["TEST_PASSED_INDICATOR"] = decode.PASS_IND;
      }
      let claimDecode = claimLevels[scaleScore];
      if(claimDecode != null && claimDecode != undefined){
         score["TEST_CUSTOM_RESULT"] = claimDecode.DESC;
      }
      return score;
   }

   /***************************************************************************
   Utility Functions
   ***************************************************************************/


   function getGradeFromFilename(row) {
      var record = {};
      var grade = null;
      var gradeStr = "GRADE_";

      // Get the file path of data file
      var rowGrade = record.LINEAGE_FILE = row.getRawField("LINEAGE_FILE").toString().toUpperCase().replace(" ", "_");

      // Check for GRADE_ in file path and get the grade.
      if (rowGrade.indexOf(gradeStr + "11") > -1) {
         grade = "11";
      }
      else if (rowGrade.indexOf(gradeStr + "8") > -1) {
         grade = "08";
      }
      else if (rowGrade.indexOf(gradeStr + "7") > -1) {
         grade = "07";
      }
      else if (rowGrade.indexOf(gradeStr + "6") > -1) {
         grade = "06";
      }
      else if (rowGrade.indexOf(gradeStr + "5") > -1) {
         grade = "05";
      }
      else if (rowGrade.indexOf(gradeStr + "4") > -1) {
         grade = "04";
      }
      else if (rowGrade.indexOf(gradeStr + "3") > -1) {
         grade = "03";
      }
      return grade;
   }

   /**
    * Attempt to parse date strings into our standard date object, writes reject if failures
    * Supported date formats
    * - yyyy-MM-dd
    * - MM dd, yyyy
    * - MM-dd-yyyy
    * - dd MMM yyyy
    *
    * @param hierarchy
    * @param row
    * @param dateStr - date string we want to parse
    * @returns {RAW_DATE, MONTH, DAY, YEAR, STANDARD_DATE} - last 4 properties will be null if this fails
    */
   module.mapDateObject = function(hierarchy, row, dateStr) {
      //Create empty test date object.
      var testDateObject = null

      //Admin dates in file are yyyyMMdd format or dd-MMM format.  Attempt to map both.
      try {
         testDateObject = AppUtil.getDateObjByPattern(dateStr, "yyyy-MM-dd");
      } catch (exception) {
            // Error will be reported in final check.
      }

      if (testDateObject === null) {
         try {
            testDateObject = AppUtil.getDateObjByPattern(dateStr, "MMM dd, yyyy");
         } catch (exception) {
            // Error will be reported in final check.
         }
      }
      if (testDateObject === null) {
         try {
            testDateObject = AppUtil.getDateObjByPattern(dateStr, "MM-dd-yyyy");
         } catch (exception) {
            // Error will be reported in final check.
         }
      }

      if (testDateObject === null) {
         try {
            testDateObject = AppUtil.getDateObjByPattern(dateStr, "dd MMM yyyy");
         } catch (exception) {
            // Error will be reported in final check.
         }
      }
      if (testDateObject === null) {
         try {
            testDateObject = AppUtil.getDateObjByPattern(dateStr, "dd-MMM-yy");
         } catch (exception) {
            // Error will be reported in final check.
         }
      }
      if (testDateObject === null) {
         try {
            testDateObject = AppUtil.getDateObjByPattern(dateStr, "d-MMM-yy");
         } catch (exception) {
            // Error will be reported in final check.
         }
      }
      if (testDateObject === null) {
         try {
            testDateObject = AppUtil.getDateObjByPattern(dateStr, "yyyy-MM-dd HH:MM:SS.SSSSSS");
         } catch (exception) {
            // Error will be reported in final check.
         }
      }
      // Set default empty objects if mappings fail and report error.
      if (testDateObject === null) {
         testDateObject = AppUtil.getEmptyDateObj(dateStr);
         AssessmentLoader.audits.push(AppAudit.writeRejectRecord(hierarchy.SOURCE_FILE.getFilePath(), "WARNING", row.getRawField("LINEAGE_LINE"), "Error parsing date string: ${dateStr}", JSON.stringify(row.getSourceRow())));
      }

      return testDateObject;
   }

   function HashTable(obj) {
      this.length = 0;
      this.items = {};
      for (var p in obj) {
         if (obj.hasOwnProperty(p)) {
            this.items[p] = obj[p];
            this.length++;
         }
      }

      this.setItem = function (key, value) {
         var previous = undefined;
         if (this.hasItem(key)) {
            previous = this.items[key];
         }
         else {
            this.length++;
         }
         this.items[key] = value;
         return previous;
      }

      this.getItem = function (key) {
         return this.hasItem(key) ? this.items[key] : undefined;
      }

      this.hasItem = function (key) {
         return this.items.hasOwnProperty(key);
      }

      this.removeItem = function (key) {
         if (this.hasItem(key)) {
            previous = this.items[key];
            this.length--;
            delete this.items[key];
            return previous;
         }
         else {
            return undefined;
         }
      }

      this.keys = function () {
         var keys = [];
         for (var k in this.items) {
            if (this.hasItem(k)) {
               keys.push(k);
            }
         }

         return keys;
      }

      this.values = function () {
         var values = [];
         for (var k in this.items) {
            if (this.hasItem(k)) {
               values.push(this.items[k]);
            }
         }

         return values;
      }

      this.each = function (fn) {
         for (var k in this.items) {
            if (this.hasItem(k)) {
               fn(k, this.items[k]);
            }
         }
      }


      this.clear = function () {
         this.items = {}
         this.length = 0;
      }
   }

   /**
   * Determines if two assessment records are for the same assessment admin
   *
   * @param signature The java signature of the file
   * @param hierarchy A JSON object containing file hierarchy values
   * @param one The first assessment record being compared
   * @param two The second assessment record being compared
   * @returns {number}
   */
   function groupAssessmentByNaturalKey(signature, hierarchy, one, two) {
      try {
         var assessmentAdminKey_one = generateAssessmentAdminKey(signature, hierarchy, one);
         var assessmentAdminKey_two = generateAssessmentAdminKey(signature, hierarchy, two);

         if (assessmentAdminKey_one === assessmentAdminKey_two) {
            return 1;
         } else {
            return -1;
         }
      } catch (exception) {
         throw "${_thisModuleName}.groupAssessmentByNaturalKey Exception: ${exception}";
      }
   }

   /**
   * Generates an Assessment Admin Key using a combination of hierarchy values and natural keys from an assessment signature
   *
   * @param signature The java signature of the file
   * @param hierarchy A JSON object containing file hierarchy values
   * @param srcRecord The assessment record being processed
   * @returns {string}
   */
   function generateAssessmentAdminKey(signature, hierarchy, srcRecord) {
      var assessmentAdminKey = "${_assessmentIdentifier}_${_util.coalesce(AssessmentLoader.config.SYS_PARTITION_VALUE, AssessmentLoader.config.TENANT_CODE)}_${AssessmentLoader.config.DISTRICT_CODE}_${hierarchy.SCHOOL_YEAR}";
      var testDateObj = module.mapDateObject(hierarchy, srcRecord, srcRecord.getField("SUBMITDATETIME").replace("Sept", "Sep"));

      //Add natural key fields
      signature.getFormat().getNaturalKey().forEach(function (key) {
         assessmentAdminKey = assessmentAdminKey + "_" + _util.coalesce(srcRecord.getField(key), "");
      });

      assessmentAdminKey = assessmentAdminKey + "_" + testDateObj.STANDARD_DATE;
      return assessmentAdminKey;
   }

   return module;
}());
